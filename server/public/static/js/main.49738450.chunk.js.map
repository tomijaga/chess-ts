{"version":3,"sources":["types/Side.ts","context/Board.tsx","designs/pieces/classic/icons/bishop.tsx","designs/pieces/classic/icons/king.tsx","designs/pieces/classic/icons/knight.tsx","designs/pieces/classic/icons/queen.tsx","designs/pieces/classic/icons/pawn.tsx","designs/pieces/classic/icons/rook.tsx","designs/pieces/classic/index.tsx","designs/pieces/classic_outlined/icons/bishop.tsx","designs/pieces/classic_outlined/icons/king.tsx","designs/pieces/classic_outlined/icons/knight.tsx","designs/pieces/classic_outlined/icons/queen.tsx","designs/pieces/classic_outlined/icons/pawn.tsx","designs/pieces/classic_outlined/icons/rook.tsx","utils/Chess.tsx","designs/pieces/classic_outlined/index.tsx","components/Tile.tsx","utils/Array.tsx","utils/Object.tsx","types/Pieces.ts","types/Board.ts","containers/Board.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SideEnum","TileDataContext","createContext","BishopIcon","props","xmlns","viewBox","height","width","d","fillRule","fill","KingIcon","KnightIcon","QueenIcon","PawnIcon","RookIcon","classic","bishop","className","king","queen","knight","pawn","rook","possibleEnPassant","from","to","piece","type","rank","file","PossibleMove","capture","style","position","left","background","borderRadius","Tile","show_move","tile","onClick","on_check","moved_last","children","useContext","lastMove","kingOnCheck","selectedTile","undefined","prevFile","prevRank","postFile","postRank","showEnPassant","clsx","oddAlphabets","includes","determineVariant","fontSize","display","justifyContent","alignItems","side","name","white","black","tilePiece","fillArray","item","size","obj","arr","i","push","Object","assign","create","getPrototypeOf","Piece","_icon","icon","hasMoved","location","this","Rook","design","Bishop","King","Queen","Knight","Pawn","SideClass","pawns","knights","bishops","rooks","capturedPieces","onCheck","getPieces","side_string","TileClass","variant","board","player_side","sides","moves","tiles","setSide","movePiece","prev","next","position_is_out_of_bounds","Error","prev_tile","column","row","next_tile","console","log","move","is_on_check","clearTiles","traverse_tiles","newGame","set_pawns","kings_column","kings_row","pieces","length","possible_moves","possible_moves_from_tile","j","index","tile_position","map_piece_to_move","action","valid_moves_if_on_check","k_column","k_row","movablePositions","linear_recursive_scan","ld","linear_scan","radial_scan","column_change","row_change","limit","Infinity","count","new_column","new_row","newPosition","is_out_of_bounds","positions","row_index","index_on_row","row_is_odd","index_is_even","socket","io","nodeEnvState","dev","prod","gameClient","chess","PGN","Board","useState","game_id","set_game_id","disable_pieces","set_player_side","tiles_jsx","set_tiles_jsx","selected_tile","set_selected_tile","turn_to_play","black_king_on_check","white_king_on_check","last_move","set_last_move","movesToDisplay","setMovesToDisplay","game","moveHistory","history","setHistory","setKingOnCheck","promotion","useEffect","on","id","updateView","algebraic","tilesDiv","squares","map","possibleMoves","validMoves","src","showPossibleMoveOnThisTile","transform","event","pgn","promotionTo","attackingPiece","notation","possiblePromotion","calculatePGN","getStatus","notatedMoves","map_tile_data_to_jsx","attackingSquare","kingSquare","square","emit","boardStyle","gridTemplateColumns","gridTemplateRows","margin","Provider","value","isCheck","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.49738450.chunk.js","sourcesContent":["import { clone } from \"utils/Object\";\nimport { fillArray } from \"utils/Array\";\nimport { IDesignPieces } from \"./Design\";\nimport { Bishop, King, Knight, Pawn, Piece, Queen, Rook } from \"./Pieces\";\n\nexport class SideClass {\n  pawns: Pawn[] = [];\n  knights: Knight[] = [];\n  king: King;\n  queen: Queen;\n  bishops: Bishop[] = [];\n  rooks: Rook[] = [];\n  capturedPieces: String[] = [];\n  onCheck: boolean = false;\n\n  constructor(design: IDesignPieces, side: number) {\n    let side_string: string = \"white\";\n\n    if (side === 1) {\n      side_string = \"black\";\n    }\n    if (side_string === \"white\") {\n      this.king = new King(design[\"white\"], \"white\");\n      this.queen = new Queen(design[\"white\"], \"white\");\n      this.pawns[0] = new Pawn(design[\"white\"], \"white\");\n      this.pawns[1] = new Pawn(design[\"white\"], \"white\");\n      this.pawns[2] = new Pawn(design[\"white\"], \"white\");\n      this.pawns[3] = new Pawn(design[\"white\"], \"white\");\n      this.pawns[4] = new Pawn(design[\"white\"], \"white\");\n      this.pawns[5] = new Pawn(design[\"white\"], \"white\");\n      this.pawns[6] = new Pawn(design[\"white\"], \"white\");\n      this.pawns[7] = new Pawn(design[\"white\"], \"white\");\n\n      this.knights = fillArray<Pawn>(new Knight(design[\"white\"], \"white\"), 2);\n      this.rooks = fillArray<Pawn>(new Rook(design[\"white\"], \"white\"), 2);\n      this.bishops = fillArray<Pawn>(new Bishop(design[\"white\"], \"white\"), 2);\n    } else {\n      this.king = new King(design[\"black\"], \"black\");\n      this.queen = new Queen(design[\"black\"], \"black\");\n      this.pawns[0] = new Pawn(design[\"black\"], \"black\");\n      this.pawns[1] = new Pawn(design[\"black\"], \"black\");\n      this.pawns[2] = new Pawn(design[\"black\"], \"black\");\n      this.pawns[3] = new Pawn(design[\"black\"], \"black\");\n      this.pawns[4] = new Pawn(design[\"black\"], \"black\");\n      this.pawns[5] = new Pawn(design[\"black\"], \"black\");\n      this.pawns[6] = new Pawn(design[\"black\"], \"black\");\n      this.pawns[7] = new Pawn(design[\"black\"], \"black\");\n      this.knights = fillArray<Pawn>(new Knight(design[\"black\"], \"black\"), 2);\n      this.rooks = fillArray<Pawn>(new Rook(design[\"black\"], \"black\"), 2);\n      this.bishops = fillArray<Pawn>(new Bishop(design[\"black\"], \"black\"), 2);\n    }\n  }\n\n  capture = (piece: String) => {\n    this.capturedPieces.push(piece);\n  };\n\n  getPieces = (): Piece[] => {\n    return [\n      this.king,\n      this.queen,\n      ...this.bishops,\n      ...this.knights,\n      ...this.pawns,\n      ...this.rooks,\n    ];\n  };\n}\n\nexport enum SideEnum {\n  white,\n  black,\n}\n\nexport const maskSideInEnum = (side: string) =>\n  side === \"white\"\n    ? 0\n    : side === \"black\"\n    ? 1\n    : () => {\n        throw new Error('Expecting \"white\" or \"black\" ');\n      };\n","import { createContext } from \"react\";\nimport { GameClient } from \"chess\";\nimport { BoardClass, ITilePosition, SelectedTile, TileData } from \"types/Board\";\n\nexport const BoardContext = createContext({} as BoardClass);\n\nexport const SelectedTileContext = createContext({} as SelectedTile);\n\nexport const GameClientContext = createContext({} as GameClient);\n\nexport const TileDataContext = createContext({} as TileData);\n","import * as React from \"react\";\n\nexport const BishopIcon = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 40 75\"\n    height={70}\n    width={70}\n    {...props}\n  >\n    <path\n      d=\"M10 10.47a8.675 8.675 0 011.498-3.683 7.575 7.575 0 002.948 4.046 1 1 0 101.108-1.665 6.506 6.506 0 01-2.517-4.704 64.574 64.574 0 013.208-4.11.997.997 0 011.51.001C21.665 4.989 24 8.771 24 10.47A6.436 6.436 0 0120.688 16h-7.376A6.436 6.436 0 0110 10.47zM8 20v-1c0-.552.448-1 1-1h16c.552 0 1 .448 1 1v1c0 .552-.448 1-1 1H9c-.552 0-1-.448-1-1zm4 3h10v11H12V23zM8 37c0-.552.448-1 1-1h16c.552 0 1 .448 1 1v2c0 .552-.448 1-1 1H9c-.552 0-1-.448-1-1v-2zm-4.933 9.475a2 2 0 011.156-2.615L9.183 42h15.635l4.96 1.86a2 2 0 011.155 2.615L30.323 48H3.677l-.61-1.525zM34 55c0 .552-.448 1-1 1h-1v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2H8v-2a1 1 0 00-2 0v2H4v-2a1 1 0 00-2 0v2H1c-.552 0-1-.448-1-1v-4c0-.552.448-1 1-1h32c.552 0 1 .448 1 1v4z\"\n      fillRule=\"nonzero\"\n      fill=\"currentColor\"\n    />\n  </svg>\n);\n","import * as React from \"react\";\n\nexport const KingIcon = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 40 75\"\n    height={70}\n    width={70}\n    {...props}\n  >\n    <g fillRule=\"nonzero\" fill=\"currentColor\">\n      <path d=\"M10.072 10.914a.837.837 0 01.018-.717c.155-.293.43-.505.753-.579L17 8.033l6.157 1.585c.324.074.598.286.753.58.113.223.12.487.018.716L22.163 15H11.837l-1.765-4.086zM8 18c0-.552.448-1 1-1h16a1 1 0 010 2H9c-.552 0-1-.448-1-1zm4 3h10v17H12V21zM9 40h16a1 1 0 010 2H9a1 1 0 010-2zm-5.933 8.475a2 2 0 011.156-2.615L9.183 44h15.635l4.96 1.86a2 2 0 011.155 2.615L30.323 50H3.677l-.61-1.525zM34 57c0 .552-.448 1-1 1h-1v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2H8v-2a1 1 0 00-2 0v2H4v-2a1 1 0 00-2 0v2H1c-.552 0-1-.448-1-1v-4c0-.552.448-1 1-1h32c.552 0 1 .448 1 1v4zM16 7.2V1a1 1 0 012 0v6.2L17 7l-1 .2z\" />\n      <path d=\"M19 4h-4a1 1 0 010-2h4a1 1 0 010 2z\" />\n    </g>\n  </svg>\n);\n","import * as React from \"react\";\n\nexport const KnightIcon = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 40 75\"\n    height={70}\n    width={70}\n    {...props}\n  >\n    <path\n      d=\"M9 41.001c-.552 0-1-.447-1-1v-2c0-.552.448-.999 1-1h16c.552.001 1 .448 1 1v2c0 .553-.448 1-1 1H9zm20.055-7.097A2.004 2.004 0 0127.215 35h-6.654c.038-.042.08-.08.116-.123a5.987 5.987 0 001.339-4.863l-1.41-8.455 8.245 10.526c.423.512.503 1.226.204 1.82zM5.123 9.573a9.9 9.9 0 015.305-3.959 22.518 22.518 0 00-6 12.228c-.822-3.35-.607-6.128.695-8.27zm.897 12.894c.17-9.708 4.758-14.706 7.114-16.629-.012.257-.02.52-.02.793a1 1 0 002 0 10.22 10.22 0 011.155-5.142c.192-.312.535-.498.9-.489l2.972-.053v2.257a1.954 1.954 0 001.128 1.752l2.643 1.247a14.917 14.917 0 014.598 3.351l3.092 3.336a1.758 1.758 0 01-.083 2.467l-1.49 1.37-2.333-1.468c-1.388-.873-3.787-1.482-7.129-1.81a3.025 3.025 0 00-2.949 1.523 2.785 2.785 0 00.258 3.1l.155.199 2.012 12.072a3.991 3.991 0 01-.893 3.242A4.047 4.047 0 0116 35H8.09a1.935 1.935 0 01-2.012-1.842V22.737a.99.99 0 00-.057-.27zm-2.953 25.01a2 2 0 011.156-2.616l4.96-1.86h15.635l4.96 1.86a2 2 0 011.155 2.616L30.323 49H3.677l-.61-1.525zM34 56c0 .553-.448 1-1 1h-1v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2H8v-2a1 1 0 00-2 0v2H4v-2a1 1 0 00-2 0v2H1c-.552 0-1-.447-1-1v-4c0-.552.448-.999 1-1h1.997l.003.001h30c.552 0 1 .447 1 1v4z\"\n      fillRule=\"nonzero\"\n      fill=\"currentColor\"\n    />\n  </svg>\n);\n","import * as React from \"react\";\n\nexport const QueenIcon = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 40 75\"\n    height={70}\n    width={70}\n    {...props}\n  >\n    <g fillRule=\"nonzero\" fill=\"currentColor\">\n      <path d=\"M17 0a2.006 2.006 0 00-2 2c-.002.413.128.816.37 1.15 1.077-.2 2.183-.2 3.26 0 .242-.334.372-.737.37-1.15a2.006 2.006 0 00-2-2zm-5.2 6.94c-.02.02-.05.04-.07.06h.09l-.02-.06zm10.4 0l-.02.06h.09c-.02-.02-.05-.04-.07-.06zm0 0l-.02.06h.09c-.02-.02-.05-.04-.07-.06zM25 15H9a1 1 0 000 2h16a1 1 0 000-2zm-13 4v17h10V19H12zm13 19H9a1 1 0 000 2h16a1 1 0 000-2zm5.91 6.93a1.981 1.981 0 00-1.13-1.07L24.82 42H9.18l-4.96 1.86a1.981 1.981 0 00-1.13 1.07 2.03 2.03 0 00-.02 1.55L3.68 48h26.64l.61-1.52a2.03 2.03 0 00-.02-1.55zM33 50H1a1.003 1.003 0 00-1 1v4c.002.552.448.998 1 1h1v-2a1 1 0 012 0v2h2v-2a1 1 0 012 0v2h2v-2a1 1 0 012 0v2h2v-2a1 1 0 012 0v2h2v-2a1 1 0 012 0v2h2v-2a1 1 0 012 0v2h2v-2a1 1 0 012 0v2h2v-2a1 1 0 012 0v2h1a1.003 1.003 0 001-1v-4a1.003 1.003 0 00-1-1z\" />\n      <path d=\"M24.85 5.32L23.62 9h-.01l-1.33 4H11.71L9.15 5.32a1.002 1.002 0 111.9-.64l.75 2.26c-.02.02-.05.04-.07.06h.09l-.02-.06a7.94 7.94 0 0110.4 0l-.02.06h.09c-.02-.02-.05-.04-.07-.06l.75-2.26a1.002 1.002 0 111.9.64z\" />\n      <path d=\"M11.82 7h-.09c.02-.02.05-.04.07-.06l.02.06zM22.27 7h-.09l.02-.06c.02.02.05.04.07.06z\" />\n    </g>\n  </svg>\n);\n","import * as React from \"react\";\n\nexport const PawnIcon = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 40 75\"\n    height={70}\n    width={70}\n    {...props}\n  >\n    <path\n      d=\"M13.05 2.05a7 7 0 119.901 9.898 7 7 0 01-9.9-9.898zm1.498 15.797a33.035 33.035 0 00-.561-2.796 8.96 8.96 0 008.027 0c-.226.92-.417 1.86-.562 2.795L21.43 18h-6.86l-.022-.153zM9 23v-2c0-.552.448-1 1-1h16c.552 0 1 .448 1 1v2c0 .552-.448 1-1 1H10c-.552 0-1-.448-1-1zm5.76 3h6.482a25.675 25.675 0 002.154 8H12.605a25.454 25.454 0 002.155-8zM7 37c0-.552.448-1 1-1h20c.552 0 1 .448 1 1v2c0 .552-.448 1-1 1H8c-.552 0-1-.448-1-1v-2zm-5.906 7.925a1.985 1.985 0 011.128-1.065l5.13-1.923.011-.008c.21.046.423.07.637.071h20c.214 0 .428-.025.637-.071l.012.008 5.13 1.923a2 2 0 011.154 2.615L34.323 48H1.677l-.61-1.525a1.987 1.987 0 01.027-1.55zM36 55c0 .552-.448 1-1 1h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2H9v-2a1 1 0 00-2 0v2H5v-2a1 1 0 00-2 0v2H1c-.552 0-1-.448-1-1v-4c0-.551.447-.998.999-1H35c.552.002.998.449.999 1v4z\"\n      fillRule=\"nonzero\"\n      fill=\"currentColor\"\n    />\n  </svg>\n);\n","import * as React from \"react\";\n\nexport const RookIcon = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 40 75\"\n    height={70}\n    width={70}\n    {...props}\n  >\n    <path\n      d=\"M5 0h2v2a2.002 2.002 0 002 2h2a2.002 2.002 0 002-2V0h2v2a2.003 2.003 0 001.999 2H19A2.003 2.003 0 0021 2V0h2v2a2.002 2.002 0 002 2h2a2.002 2.002 0 002-2V0h2v5.871a4.023 4.023 0 01-1.228 2.884L28.477 10H7.523L6.228 8.755A4.022 4.022 0 015 5.87V0zm2 15v-2c0-.552.448-1 1-1h20c.552 0 1 .448 1 1v2c0 .552-.448 1-1 1H8c-.552 0-1-.448-1-1zm3 3h16v16H10V18zM7 37c0-.552.448-1 1-1h20c.552 0 1 .448 1 1v2c0 .552-.448 1-1 1H8c-.552 0-1-.448-1-1v-2zm-5.906 7.925a1.985 1.985 0 011.128-1.065l5.13-1.923.011-.008c.21.046.423.07.637.071h20c.214 0 .428-.025.637-.071l.012.008 5.13 1.922a2 2 0 011.154 2.616L34.323 48H1.677l-.61-1.525a1.987 1.987 0 01.027-1.55zM36 55c0 .552-.448 1-1 1h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2H9v-2a1 1 0 00-2 0v2H5v-2a1 1 0 00-2 0v2H1c-.552 0-1-.448-1-1v-4c0-.551.447-.998.999-1H35A1 1 0 0136 51v4z\"\n      fillRule=\"nonzero\"\n      fill=\"currentColor\"\n    />\n  </svg>\n);\n","import { BishopIcon } from \"./icons/bishop\";\nimport { KingIcon } from \"./icons/king\";\nimport { KnightIcon } from \"./icons/knight\";\nimport { QueenIcon } from \"./icons/queen\";\nimport { PawnIcon } from \"./icons/pawn\";\nimport { RookIcon } from \"./icons/rook\";\n\nimport { IDesignPieces } from \"types/Design\";\n\nexport const classic: IDesignPieces = {\n  [\"black\"]: {\n    bishop: <BishopIcon className=\"pieces black_pieces\" height={70}/>,\n    king: <KingIcon className=\"pieces black_pieces\"  height={70} />,\n    queen: <QueenIcon className=\"pieces black_pieces\" height={70} />,\n    knight: <KnightIcon className=\"pieces black_pieces\" height={70} />,\n    pawn: <PawnIcon className=\"pieces black_pieces\" height={70} />,\n    rook: <RookIcon className=\"pieces black_pieces\" height={70} />,\n  },\n  [\"white\"]: {\n    bishop: <BishopIcon className=\"pieces white_pieces\" height={70} />,\n    king: <KingIcon className=\"pieces white_pieces\" height={70} />,\n    queen: <QueenIcon className=\"pieces white_pieces\" height={70} />,\n    knight: <KnightIcon className=\"pieces white_pieces\" height={70} />,\n    pawn: <PawnIcon className=\"pieces white_pieces\" height={70} />,\n    rook: <RookIcon className=\"pieces white_pieces\" height={70} />,\n  },\n};\n","import * as React from \"react\";\n\nexport const BishopIcon = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 40 75\"\n    height={70}\n    width={70}\n    {...props}\n  >\n    <path\n      d=\"M3 60h32a3.003 3.003 0 003-3v-4a3.003 3.003 0 00-3-3h-.523l.313-.782a4.001 4.001 0 00-2.31-5.231l-3.112-1.167A2.97 2.97 0 0030 41v-2a3.003 3.003 0 00-3-3h-1V25h1a3.003 3.003 0 003-3v-1a3.003 3.003 0 00-3-3h-1.176A8.258 8.258 0 0028 12.47c0-2.847-3.652-7.774-6.716-11.404a2.976 2.976 0 00-4.568-.001C13.652 4.696 10 9.623 10 12.47c.014 2.05.79 4.02 2.176 5.53H11a3.003 3.003 0 00-3 3v1a3.003 3.003 0 003 3h1v11h-1a3.003 3.003 0 00-3 3v2c.003.66.225 1.3.632 1.82L5.52 43.987a4.001 4.001 0 00-2.31 5.231l.313.782H3a3.003 3.003 0 00-3 3v4a3.003 3.003 0 003 3zm9-47.53a8.675 8.675 0 011.498-3.683 7.575 7.575 0 002.948 4.046 1 1 0 101.108-1.665 6.506 6.506 0 01-2.517-4.704 64.574 64.574 0 013.208-4.11.997.997 0 011.51.001C23.665 6.989 26 10.771 26 12.47A6.436 6.436 0 0122.688 18h-7.376A6.436 6.436 0 0112 12.47zM10 22v-1c0-.552.448-1 1-1h16c.552 0 1 .448 1 1v1c0 .552-.448 1-1 1H11c-.552 0-1-.448-1-1zm4 3h10v11H14V25zm-4 14c0-.552.448-1 1-1h16c.552 0 1 .448 1 1v2c0 .552-.448 1-1 1H11c-.552 0-1-.448-1-1v-2zm-4.933 9.475a2 2 0 011.156-2.615l4.96-1.86h15.635l4.96 1.86a2 2 0 011.155 2.615L32.323 50H5.677l-.61-1.525zM2 53c0-.552.448-1 1-1h32c.552 0 1 .448 1 1v4c0 .552-.448 1-1 1h-1v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2H6v-2a1 1 0 00-2 0v2H3c-.552 0-1-.448-1-1v-4z\"\n      fillRule=\"nonzero\"\n      fill=\"currentColor\"\n    />\n  </svg>\n);\n","import * as React from \"react\";\n\nexport const KingIcon = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 40 75\"\n    height={70}\n    width={70}\n    {...props}\n  >\n    <path\n      d=\"M3 60h32a3.003 3.003 0 003-3v-4a3.003 3.003 0 00-3-3h-.523l.313-.782a4.001 4.001 0 00-2.31-5.231l-3.112-1.167A2.97 2.97 0 0030 41a3.003 3.003 0 00-3-3h-1V21h1a3 3 0 000-6h-.659l1.423-3.292c.331-.767.31-1.64-.058-2.39a3.13 3.13 0 00-2.05-1.636L20 6.225V4h1a1 1 0 000-2h-1V1a1 1 0 00-2 0v1h-1a1 1 0 000 2h1v2.225l-5.655 1.457a3.13 3.13 0 00-2.051 1.635 2.852 2.852 0 00-.058 2.39L11.66 15H11a3 3 0 000 6h1v17h-1a3.003 3.003 0 00-3 3c.003.66.225 1.3.632 1.82L5.52 43.987a4.001 4.001 0 00-2.31 5.231l.313.782H3a3.003 3.003 0 00-3 3v4a3.003 3.003 0 003 3zm9.072-49.086a.837.837 0 01.018-.717c.155-.293.43-.505.753-.579L19 8.033l6.157 1.585c.324.074.598.286.753.58.113.223.12.487.018.716L24.163 15H13.837l-1.765-4.086zM10 18c0-.552.448-1 1-1h16a1 1 0 010 2H11c-.552 0-1-.448-1-1zm4 3h10v17H14V21zm-3 19h16a1 1 0 010 2H11a1 1 0 010-2zm-5.933 8.475a2 2 0 011.156-2.615l4.96-1.86h15.635l4.96 1.86a2 2 0 011.155 2.615L32.323 50H5.677l-.61-1.525zM2 53c0-.552.448-1 1-1h32c.552 0 1 .448 1 1v4c0 .552-.448 1-1 1h-1v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2H6v-2a1 1 0 00-2 0v2H3c-.552 0-1-.448-1-1v-4z\"\n      fillRule=\"nonzero\"\n      fill=\"currentColor\"\n    />\n  </svg>\n);\n","import * as React from \"react\";\n\nexport const KnightIcon = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 40 75\"\n    height={70}\n    width={70}\n    {...props}\n  >\n    <path\n      d=\"M35 50.001h-.523l.313-.782a4.001 4.001 0 00-2.31-5.23l-3.112-1.168a2.97 2.97 0 00.632-1.82v-2a2.969 2.969 0 00-.197-1.041 3.957 3.957 0 003.05-2.18 3.653 3.653 0 00-.428-3.928L21.45 17.84a.795.795 0 01-.079-.904 1.004 1.004 0 011.001-.497c2.987.294 5.152.817 6.26 1.514l2.334 1.469a2.033 2.033 0 002.477-.243l1.449-1.366a3.765 3.765 0 00.176-5.282l-3.091-3.335a16.896 16.896 0 00-5.211-3.8l-2.625-1.19V1.946A1.979 1.979 0 0022.137 0H19.17a3.031 3.031 0 00-2.635 1.493 9.92 9.92 0 00-.95 2.34c-1.689.186-7.389 1.142-10.163 5.688-2.17 3.557-1.967 8.353.587 14.253 0 .078-.009.148-.009.226 0 .133.027.265.078.387v9.77A3.828 3.828 0 008.36 37.61 2.961 2.961 0 008 39v2c.003.66.225 1.3.632 1.82L5.52 43.988a4 4 0 00-2.31 5.23l.313.783H3a3.003 3.003 0 00-3 3v4a3.004 3.004 0 003 3.001h32a3.004 3.004 0 003-3v-4a3.003 3.003 0 00-3-3zm-24-8c-.552 0-1-.447-1-1v-2c0-.552.448-.999 1-1h16c.552.001 1 .448 1 1v2c0 .553-.448 1-1 1H11zm20.055-7.097A2.004 2.004 0 0129.215 36h-6.654c.038-.042.08-.08.116-.123a5.987 5.987 0 001.339-4.863l-1.41-8.455 8.245 10.526c.423.512.503 1.226.204 1.82zM7.123 10.573a9.9 9.9 0 015.305-3.959 22.518 22.518 0 00-6 12.228c-.822-3.35-.607-6.128.695-8.27zm.897 12.894c.17-9.708 4.758-14.706 7.114-16.629-.012.257-.02.52-.02.793a1 1 0 002 0 10.22 10.22 0 011.155-5.142c.192-.312.535-.498.9-.489l2.972-.053v2.257a1.954 1.954 0 001.128 1.752l2.643 1.247a14.917 14.917 0 014.598 3.351l3.092 3.336a1.758 1.758 0 01-.083 2.467l-1.49 1.37-2.333-1.468c-1.388-.873-3.787-1.482-7.129-1.81a3.025 3.025 0 00-2.949 1.523 2.785 2.785 0 00.258 3.1l.155.199 2.012 12.072a3.991 3.991 0 01-.893 3.242A4.047 4.047 0 0118 36h-7.91a1.935 1.935 0 01-2.012-1.842V23.737a.99.99 0 00-.057-.27zm-2.953 25.01a2 2 0 011.156-2.616l4.96-1.86h15.635l4.96 1.86a2 2 0 011.155 2.616L32.323 50H5.677l-.61-1.525zM36 57c0 .553-.448 1-1 1h-1v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2H6v-2a1 1 0 00-2 0v2H3c-.552 0-1-.447-1-1v-4c0-.552.448-.999 1-1h1.997l.003.001h30c.552 0 1 .447 1 1v4z\"\n      fillRule=\"nonzero\"\n      fill=\"currentColor\"\n    />\n  </svg>\n);\n","import * as React from \"react\";\n\nexport const QueenIcon = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 40 75\"\n    height={70}\n    width={70}\n    {...props}\n  >\n    <path\n      d=\"M3 60h32a3.003 3.003 0 003-3v-4a3.003 3.003 0 00-3-3h-.523l.313-.782a4.001 4.001 0 00-2.31-5.231l-3.112-1.167A2.97 2.97 0 0030 41a3.003 3.003 0 00-3-3h-1V21h1a3 3 0 000-6h-.613l1.389-4.166.01-.028 1.162-3.49a1 1 0 10-1.896-.632l-.571 1.713a9.984 9.984 0 00-3.86-2.703 4 4 0 10-7.241 0 9.984 9.984 0 00-3.86 2.703l-.572-1.713a1 1 0 10-1.896.632l1.163 3.49.01.028L11.612 15H11a3 3 0 000 6h1v17h-1a3.003 3.003 0 00-3 3c.003.66.225 1.3.632 1.82L5.52 43.987a4.001 4.001 0 00-2.31 5.231l.313.782H3a3.003 3.003 0 00-3 3v4a3.003 3.003 0 003 3zM19 7a7.993 7.993 0 015.266 2H13.734A7.993 7.993 0 0119 7zm-2-3a2 2 0 113.635 1.15c-1.08-.2-2.19-.2-3.27 0A1.977 1.977 0 0117 4zm-4.613 7h13.226l-1.333 4H13.72l-1.333-4zM10 18c0-.552.448-1 1-1h16a1 1 0 010 2H11c-.552 0-1-.448-1-1zm4 3h10v17H14V21zm-3 19h16a1 1 0 010 2H11a1 1 0 010-2zm-5.933 8.475a2 2 0 011.156-2.615l4.96-1.86h15.635l4.96 1.86a2 2 0 011.155 2.615L32.323 50H5.677l-.61-1.525zM2 53c0-.552.448-1 1-1h32c.552 0 1 .448 1 1v4c0 .552-.448 1-1 1h-1v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2H6v-2a1 1 0 00-2 0v2H3c-.552 0-1-.448-1-1v-4z\"\n      fillRule=\"nonzero\"\n      fill=\"currentColor\"\n    />\n  </svg>\n);\n","import * as React from \"react\";\n\nexport const PawnIcon = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 40 75\"\n    height={70}\n    width={70}\n    {...props}\n  >\n    <path\n      d=\"M3 60h34a3.003 3.003 0 003-3v-4a2.993 2.993 0 00-1.656-2.667l.446-1.115a4 4 0 00-2.31-5.231l-3.909-1.466c.278-.459.426-.985.429-1.521v-2a3.003 3.003 0 00-3-3h-2.528a.98.98 0 00-.091-.434A23.55 23.55 0 0125.254 28H28a3.003 3.003 0 003-3v-2a3.003 3.003 0 00-3-3h-2.544a30.257 30.257 0 011.246-5.009 9 9 0 10-13.404 0A30.244 30.244 0 0114.544 20H12a3.003 3.003 0 00-3 3v2a3.003 3.003 0 003 3h2.749a23.384 23.384 0 01-2.13 7.566.98.98 0 00-.09.434H10a3.003 3.003 0 00-3 3v2c.003.536.15 1.062.429 1.521l-3.91 1.466a4 4 0 00-2.309 5.231l.446 1.115A2.993 2.993 0 000 53v4a3.003 3.003 0 003 3zm35-3c0 .552-.448 1-1 1h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2H7v-2a1 1 0 00-2 0v2H3c-.552 0-1-.448-1-1v-4c0-.551.447-.998.999-1H37c.552.002.998.449.999 1v4zM15.05 4.05a7 7 0 119.901 9.898 7 7 0 01-9.9-9.898zm1.498 15.797a33.035 33.035 0 00-.561-2.796 8.96 8.96 0 008.027 0c-.226.92-.417 1.86-.562 2.795L23.43 20h-6.86l-.022-.153zM11 25v-2c0-.552.448-1 1-1h16c.552 0 1 .448 1 1v2c0 .552-.448 1-1 1H12c-.552 0-1-.448-1-1zm5.76 3h6.482a25.675 25.675 0 002.154 8H14.605a25.454 25.454 0 002.155-8zM9 39c0-.552.448-1 1-1h20c.552 0 1 .448 1 1v2c0 .552-.448 1-1 1H10c-.552 0-1-.448-1-1v-2zm-5.906 7.925a1.985 1.985 0 011.128-1.065l5.13-1.923.011-.008c.21.046.423.07.637.071h20c.214 0 .428-.025.637-.071l.012.008 5.13 1.923a2 2 0 011.154 2.615L36.323 50H3.677l-.61-1.525a1.987 1.987 0 01.027-1.55z\"\n      fillRule=\"nonzero\"\n      fill=\"currentColor\"\n    />\n  </svg>\n);\n","import * as React from \"react\";\n\nexport const RookIcon = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 40 75\"\n    height={70}\n    width={70}\n    {...props}\n  >\n    <path\n      d=\"M3 60h34a3.003 3.003 0 003-3v-4a2.993 2.993 0 00-1.656-2.667l.446-1.115a4.001 4.001 0 00-2.31-5.231l-3.909-1.466c.278-.459.426-.985.429-1.521v-2a3.003 3.003 0 00-3-3V20a3.003 3.003 0 003-3v-2a2.973 2.973 0 00-.735-1.945l.894-.859A6.031 6.031 0 0035 7.871V2a2.002 2.002 0 00-2-2h-2a2.002 2.002 0 00-2 2v2h-2V2a2.002 2.002 0 00-2-2h-2a2.002 2.002 0 00-2 2v2h-2V2a2.002 2.002 0 00-2-2h-2a2.002 2.002 0 00-2 2v2h-2V2a2.002 2.002 0 00-2-2H7a2.002 2.002 0 00-2 2v5.871a6.03 6.03 0 001.842 4.325l.893.859A2.973 2.973 0 007 15v2a3.003 3.003 0 003 3v16a3.003 3.003 0 00-3 3v2c.003.536.15 1.062.429 1.521l-3.91 1.466a4 4 0 00-2.309 5.231l.446 1.115A2.993 2.993 0 000 53v4a3.003 3.003 0 003 3zm35-3c0 .552-.448 1-1 1h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2H7v-2a1 1 0 00-2 0v2H3c-.552 0-1-.448-1-1v-4c0-.551.447-.998.999-1H37A1 1 0 0138 53v4zM7 2h2v2a2.002 2.002 0 002 2h2a2.002 2.002 0 002-2V2h2v2a2.003 2.003 0 001.999 2H21A2.003 2.003 0 0023 4V2h2v2a2.002 2.002 0 002 2h2a2.002 2.002 0 002-2V2h2v5.871a4.023 4.023 0 01-1.228 2.884L30.477 12H9.523l-1.295-1.245A4.022 4.022 0 017 7.87V2zm2 15v-2c0-.552.448-1 1-1h20c.552 0 1 .448 1 1v2c0 .552-.448 1-1 1H10c-.552 0-1-.448-1-1zm3 3h16v16H12V20zM9 39c0-.552.448-1 1-1h20c.552 0 1 .448 1 1v2c0 .552-.448 1-1 1H10c-.552 0-1-.448-1-1v-2zm-5.906 7.925a1.985 1.985 0 011.128-1.065l5.13-1.923.011-.008c.21.046.423.07.637.071h20c.214 0 .428-.025.637-.071l.012.008 5.13 1.922a2 2 0 011.154 2.616L36.323 50H3.677l-.61-1.525a1.987 1.987 0 01.027-1.55z\"\n      fillRule=\"nonzero\"\n      fill=\"currentColor\"\n    />\n  </svg>\n);\n","import { Square } from \"chess\";\n\nexport const possibleEnPassant = (from: Square, to: Square): boolean => {\n  return from.piece.type === \"pawn\"\n    ? from.rank + 1 === to.rank && from.file !== to.file\n    : false;\n};\n\nexport const possiblePromotion = (from: Square, to: Square): boolean => {\n  return from.piece.type === \"pawn\" && (to.rank === 8 || to.rank === 1);\n};\n\nexport const calculatePGN = (\n  from: Square,\n  to: Square,\n  promotionTo?: string\n) => {\n  const castling =\n    from.piece.type === \"king\" &&\n    from.file === \"e\" &&\n    (to.file === \"g\" || to.file === \"c\");\n\n  if (castling) {\n    return to.file === \"g\" ? \"O-O\" : \"O-O-O\";\n  }\n\n  const attackingPiece = possibleEnPassant(from, to) || to.piece !== null;\n  return (\n    from.piece.notation +\n    (from.piece.type === \"pawn\" && attackingPiece ? from.file : \"\") +\n    (attackingPiece ? \"x\" : \"\") +\n    to.file +\n    to.rank +\n    (possiblePromotion(from, to) ? (promotionTo ? promotionTo : \"\") : \"\")\n  );\n};\n","import { BishopIcon } from \"./icons/bishop\";\nimport { KingIcon } from \"./icons/king\";\nimport { KnightIcon } from \"./icons/knight\";\nimport { QueenIcon } from \"./icons/queen\";\nimport { PawnIcon } from \"./icons/pawn\";\nimport { RookIcon } from \"./icons/rook\";\n\nimport { IDesignPieces } from \"types/Design\";\n\nexport const classic_outlined: IDesignPieces = {\n  [\"black\"]: {\n    bishop: <BishopIcon className=\"pieces black_pieces\" height={70}/>,\n    king: <KingIcon className=\"pieces black_pieces\"  height={70} />,\n    queen: <QueenIcon className=\"pieces black_pieces\" height={70} />,\n    knight: <KnightIcon className=\"pieces black_pieces\" height={70} />,\n    pawn: <PawnIcon className=\"pieces black_pieces\" height={70} />,\n    rook: <RookIcon className=\"pieces black_pieces\" height={70} />,\n  },\n  [\"white\"]: {\n    bishop: <BishopIcon className=\"pieces white_pieces\" height={70} />,\n    king: <KingIcon className=\"pieces white_pieces\" height={70} />,\n    queen: <QueenIcon className=\"pieces white_pieces\" height={70} />,\n    knight: <KnightIcon className=\"pieces white_pieces\" height={70} />,\n    pawn: <PawnIcon className=\"pieces white_pieces\" height={70} />,\n    rook: <RookIcon className=\"pieces white_pieces\" height={70} />,\n  },\n};\n","import React, { CSSProperties, FC, MouseEvent, useContext } from \"react\";\nimport CSS from \"csstype\";\nimport clsx from \"clsx\";\nimport { Square } from \"chess\";\n\nimport \"./Tile.css\";\nimport { ITilePosition, TileClass } from \"../types/Board\";\nimport { TileDataContext } from \"context/Board\";\n\nimport { classic } from \"designs/pieces\";\nimport { possibleEnPassant } from \"utils/Chess\";\n\nconst PossibleMove: FC<{ capture?: boolean }> = ({ capture }) => {\n  return (\n    <div\n      style={{\n        position: \"absolute\",\n        left: \"50%\",\n      }}\n    >\n      <div\n        style={{\n          width: \"30px\",\n          height: \"30px\",\n          background: capture ? \"rgba(200, 0, 0, 0.5)\" : \"rgba(0, 0, 0, 0.2)\",\n          borderRadius: \"50%\",\n          position: \"relative\",\n          left: \"-50%\",\n        }}\n      />\n    </div>\n  );\n};\n\nconst Tile: FC<{\n  tile: Square;\n  onClick: (event: MouseEvent) => void;\n  on_check: boolean;\n  moved_last: boolean;\n  show_move: boolean;\n  style: CSSProperties;\n}> = ({ show_move, tile, onClick, on_check, moved_last, style, children }) => {\n  const { lastMove, kingOnCheck, selectedTile } = useContext(TileDataContext);\n\n  const determineVariant = () => {\n    const oddAlphabets = [\"a\", \"c\", \"e\", \"g\"];\n\n    if (tile.rank % 2 == 1) {\n      if (oddAlphabets.includes(tile.file)) {\n        return \"--variant1\";\n      } else {\n        return \"--variant2\";\n      }\n    } else {\n      if (oddAlphabets.includes(tile.file)) {\n        return \"--variant2\";\n      } else {\n        return \"--variant1\";\n      }\n    }\n  };\n\n  const tilePiece = () => {\n    if (tile.piece?.side.name === \"white\") {\n      switch (tile.piece.type) {\n        case \"pawn\":\n          return classic.white.pawn;\n        case \"bishop\":\n          return classic.white.bishop;\n        case \"king\":\n          return classic.white.king;\n        case \"queen\":\n          return classic.white.queen;\n        case \"rook\":\n          return classic.white.rook;\n        case \"knight\":\n          return classic.white.knight;\n      }\n    } else if (tile.piece?.side.name === \"black\") {\n      switch (tile.piece.type) {\n        case \"pawn\":\n          return classic.black.pawn;\n        case \"bishop\":\n          return classic.black.bishop;\n        case \"king\":\n          return classic.black.king;\n        case \"queen\":\n          return classic.black.queen;\n        case \"rook\":\n          return classic.black.rook;\n        case \"knight\":\n          return classic.black.knight;\n      }\n    }\n  };\n\n  if (lastMove !== undefined) {\n    moved_last =\n      (lastMove.prevFile === tile.file && lastMove.prevRank === tile.rank) ||\n      (lastMove.postFile === tile.file && lastMove.postRank === tile.rank);\n  }\n\n  if (kingOnCheck !== undefined) {\n    on_check = kingOnCheck.file === tile.file && kingOnCheck.rank === tile.rank;\n  }\n\n  const showEnPassant =\n    selectedTile !== undefined && selectedTile.piece\n      ? possibleEnPassant(selectedTile, tile)\n      : false;\n\n  return (\n    <>\n      <div\n        onClick={onClick}\n        className={clsx(\n          \"tile\",\n          on_check && \"--on-check\",\n          moved_last && \"--moved-last\",\n          !on_check && !moved_last && determineVariant()\n        )}\n        style={{\n          fontSize: \"small\",\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          ...style,\n        }}\n      >\n        {}\n        {tilePiece()}\n        {show_move === true ? (\n          <PossibleMove capture={tile.piece !== null || showEnPassant} />\n        ) : (\n          <></>\n        )}\n\n        {/* <div style={{ position: \"absolute\", bottom: \"0%\", display: \"flex\" }}>\n          {\" \"}\n          <div>[{row}]</div>\n          <div>[{column}]</div>\n        </div> */}\n      </div>\n    </>\n  );\n};\n\nexport default Tile;\n","import { Pawn } from \"types/Pieces\";\nimport { clone } from \"utils/Object\";\n\nexport const fillArray = <T extends unknown>(item: any, size: number): T[] => {\n  const arr: T[] = [];\n\n  for (let i = 0; i < size; i++) {\n    if (typeof item === \"object\") {\n      arr.push(clone(item));\n    }\n    arr.push(item);\n  }\n  return arr;\n};\n","export const clone = (obj: object) =>\n  Object.assign(Object.create(Object.getPrototypeOf(obj)), obj);\n","import { ITilePosition } from \"./Board\";\nimport { ISidePieces } from \"./Design\";\n\nexport class Piece {\n  icon: JSX.Element;\n  type: string;\n  side: string;\n  hasMoved: boolean = false;\n  location: ITilePosition | null = null;\n\n  constructor(_icon: JSX.Element, type: string, side: string) {\n    this.icon = _icon;\n    this.type = type;\n    this.side = side;\n  }\n}\n\nexport class Rook extends Piece {\n  constructor(design: ISidePieces, side: string) {\n    super(design.rook, \"rook\", side);\n  }\n}\n\nexport class Bishop extends Piece {\n  constructor(design: ISidePieces, side: string) {\n    super(design.bishop, \"bishop\", side);\n  }\n}\n\nexport class King extends Piece {\n  constructor(design: ISidePieces, side: string) {\n    super(design.king, \"king\", side);\n  }\n}\n\nexport class Queen extends Piece {\n  constructor(design: ISidePieces, side: string) {\n    super(design.queen, \"queen\", side);\n  }\n}\n\nexport class Knight extends Piece {\n  constructor(design: ISidePieces, side: string) {\n    super(design.knight, \"knight\", side);\n  }\n}\n\nexport class Pawn extends Piece {\n  constructor(design: ISidePieces, side: string) {\n    super(design.pawn, \"pawn\", side);\n  }\n}\n","import {\n  collapseTextChangeRangesAcrossMultipleVersions,\n  VoidExpression,\n} from \"typescript\";\nimport { IDesignPieces } from \"./Design\";\nimport { Piece } from \"./Pieces\";\nimport { SideEnum, SideClass } from \"./Side\";\nimport { clone } from \"utils/Object\";\nimport { Move, Square } from \"chess\";\n\nexport interface ITilePosition {\n  row: number;\n  column: number;\n}\n\nexport interface SelectedTile {\n  position: ITilePosition;\n  possible_moves: ITilePosition[];\n}\n\nexport interface IMovePiece {\n  prev: ITilePosition;\n  next: ITilePosition;\n}\n\nexport class TileClass {\n  piece?: Piece;\n  variant: number;\n\n  constructor(variant: number) {\n    this.variant = variant;\n  }\n}\n\nexport interface TileData {\n  lastMove: Move | undefined;\n  kingOnCheck?: Square;\n  selectedTile?: Square;\n}\n\nconst nodeEnvState = (dev: any, prod: any) => {\n  if (process.env.NODE_ENV === \"development\") {\n    return dev;\n  } else {\n    return prod;\n  }\n};\n\nexport interface BoardSides {\n  white: SideClass;\n  black: SideClass;\n}\n\nexport class BoardClass {\n  player_side: String = \"white\";\n  sides: BoardSides;\n  moves: IMovePiece[] = [];\n  tiles: TileClass[][] = [];\n  onCheck: boolean = false;\n\n  constructor(design: IDesignPieces) {\n    this.sides = {\n      white: new SideClass(design, SideEnum.white),\n      black: new SideClass(design, SideEnum.black),\n    };\n\n    for (let row_index = 0; row_index < 8; row_index++) {\n      let index_on_row: number = 0;\n      const row: TileClass[] = [];\n\n      const row_is_odd: boolean = row_index % 2 === 1;\n\n      while (index_on_row < 8) {\n        const index_is_even = index_on_row % 2 === 0;\n        let variant: number = 1;\n\n        if (row_is_odd) {\n          if (index_is_even) {\n            variant = 2;\n          }\n        } else {\n          if (!index_is_even) {\n            variant = 2;\n          }\n        }\n\n        row.push(new TileClass(variant));\n        index_on_row++;\n      }\n\n      this.tiles.push(row);\n    }\n    console.log(\"Called Constructor\");\n    this.newGame();\n  }\n\n  setSide = (side: String) => {\n    this.player_side = nodeEnvState(\"white\", side);\n  };\n\n  movePiece = (prev: ITilePosition, next: ITilePosition) => {\n    if (!this.position_is_out_of_bounds(next)) {\n      let prev_tile = this.tiles[prev.column][prev.row];\n      let next_tile = this.tiles[next.column][next.row];\n      console.log({ next_tile, prev_tile });\n\n      if (prev_tile.piece) {\n        //Castling\n        // if(prev_tile.piece.type===\"king\" && !prev_tile.piece.hasMoved){\n        //   const next_column_change = prev_tile.piece.side ===\"white\"?2:-2;\n        //   if(next.column === prev.column + next_column_change){\n        //     const column_change_till_edge = prev_tile.piece.side ===\"white\"?3:-3;\n\n        //     const edge_tile = this.tiles[prev.column+column_change_till_edge][prev.row];\n        //     if(edge_tile.piece && edge_tile.piece.type===\"rook\" && !edge_tile.piece.hasMoved){\n\n        //       return;\n        //     }\n        //   }\n\n        // }\n\n        //set Piece hasMove to true\n        if (!prev_tile.piece.hasMoved) prev_tile.piece.hasMoved = true;\n\n        //capture Piece\n        if (next_tile.piece && prev_tile.piece.side !== next_tile.piece.side) {\n          switch (prev_tile.piece.side) {\n            case \"white\":\n              this.sides[\"white\"].capture(next_tile.piece.type);\n\n              break;\n            case \"black\":\n              this.sides[\"black\"].capture(next_tile.piece.type);\n              break;\n\n            default:\n              throw new Error(\"@movePiece. prev_tile's side does not exist \");\n          }\n        }\n\n        //move piece\n        next_tile.piece = prev_tile.piece;\n        next_tile.piece.location = next;\n        prev_tile.piece = undefined;\n        const move: IMovePiece = { prev, next };\n        this.moves.push(move);\n\n        //are the kings on check?\n        this.sides.black.onCheck = this.is_on_check(\"black\");\n        this.sides.white.onCheck = this.is_on_check(\"white\");\n\n        return move;\n      } else {\n        throw new Error(\"There was no Piece on Previous Tile\");\n      }\n    } else {\n      throw new Error(\"Next Position Out of Bounds\");\n    }\n  };\n\n  private clearTiles = () => {\n    this.traverse_tiles((tile) => {\n      tile.piece = undefined;\n    });\n  };\n\n  newGame = () => {\n    this.clearTiles();\n\n    this.tiles[0][0].piece = this.sides.white.rooks[0];\n    this.sides.white.rooks[0].location = { column: 0, row: 0 };\n    this.tiles[1][0].piece = this.sides.white.knights[0];\n    this.sides.white.knights[0].location = { column: 1, row: 0 };\n    this.tiles[2][0].piece = this.sides.white.bishops[0];\n    this.sides.white.bishops[0].location = { column: 2, row: 0 };\n    this.tiles[3][0].piece = this.sides.white.queen;\n    this.sides.white.queen.location = { column: 3, row: 0 };\n    this.tiles[4][0].piece = this.sides.white.king;\n    this.sides.white.king.location = { column: 4, row: 0 };\n    this.tiles[5][0].piece = this.sides.white.bishops[1];\n    this.sides.white.bishops[1].location = { column: 5, row: 0 };\n    this.tiles[6][0].piece = this.sides.white.knights[1];\n    this.sides.white.knights[1].location = { column: 6, row: 0 };\n    this.tiles[7][0].piece = this.sides.white.rooks[1];\n    this.sides.white.rooks[1].location = { column: 7, row: 0 };\n\n    this.tiles[0][7].piece = this.sides.black.rooks[0];\n    this.sides.black.rooks[0].location = { column: 0, row: 7 };\n    this.tiles[1][7].piece = this.sides.black.knights[0];\n    this.sides.black.knights[0].location = { column: 1, row: 7 };\n    this.tiles[2][7].piece = this.sides.black.bishops[0];\n    this.sides.black.bishops[0].location = { column: 2, row: 7 };\n    this.tiles[3][7].piece = this.sides.black.queen;\n    this.sides.black.queen.location = { column: 3, row: 7 };\n    this.tiles[4][7].piece = this.sides.black.king;\n    this.sides.black.king.location = { column: 4, row: 7 };\n    this.tiles[5][7].piece = this.sides.black.bishops[1];\n    this.sides.black.bishops[1].location = { column: 5, row: 7 };\n    this.tiles[6][7].piece = this.sides.black.knights[1];\n    this.sides.black.knights[1].location = { column: 6, row: 7 };\n    this.tiles[7][7].piece = this.sides.black.rooks[1];\n    this.sides.black.rooks[1].location = { column: 7, row: 7 };\n\n    this.set_pawns();\n  };\n\n  private is_on_check = (side: string): boolean => {\n    switch (side) {\n      case \"white\":\n        if (this.sides.white.king.location) {\n          const {\n            column: kings_column,\n            row: kings_row,\n          } = this.sides.white.king.location;\n\n          const pieces = this.sides.black.getPieces();\n\n          for (let i = 0; i < pieces.length; ++i) {\n            const piece = pieces[i];\n            if (piece.location) {\n              const possible_moves = this.possible_moves_from_tile(\n                piece.location\n              );\n\n              for (let j = 0; j < possible_moves.length; ++j) {\n                const move = possible_moves[j];\n                if (move.column === kings_column && move.row === kings_row)\n                  return true;\n              }\n            }\n          }\n        }\n\n        break;\n      case \"black\":\n        if (this.sides.black.king.location) {\n          const {\n            column: kings_column,\n            row: kings_row,\n          } = this.sides.black.king.location;\n\n          const pieces = this.sides.white.getPieces();\n          for (let i = 0; i < pieces.length; ++i) {\n            const piece = pieces[i];\n\n            if (piece.location) {\n              const possible_moves = this.possible_moves_from_tile(\n                piece.location\n              );\n\n              for (let j = 0; j < possible_moves.length; ++j) {\n                const move = possible_moves[j];\n                if (move.column === kings_column && move.row === kings_row)\n                  return true;\n              }\n            }\n          }\n        }\n        break;\n      default:\n        throw Error('parameter side should be either \"white\" or \"black\"');\n    }\n    return false;\n  };\n\n  private set_pawns = () => {\n    for (let index = 0; index < 8; ++index) {\n      this.tiles[index][1].piece = this.sides.white.pawns[index];\n      this.sides.white.pawns[index].location = { column: index, row: 1 };\n\n      this.tiles[index][6].piece = this.sides.black.pawns[index];\n      this.sides.black.pawns[index].location = { column: index, row: 6 };\n    }\n  };\n\n  possible_moves_from_tile = (tile_position: ITilePosition) => {\n    const { column, row } = tile_position;\n\n    const tile = this.tiles[column][row];\n\n    let possible_moves: ITilePosition[] = [];\n\n    if (tile.piece) {\n      possible_moves = this.map_piece_to_move(tile_position, tile.piece);\n    }\n\n    return possible_moves;\n  };\n\n  private traverse_tiles = (action: (tile: TileClass) => void) => {\n    for (let row = 0; row < 8; ++row) {\n      let column: number = 0;\n\n      while (column < 8) {\n        action(this.tiles[column++][row]);\n      }\n    }\n  };\n\n  valid_moves_if_on_check = () => {\n    const { column: k_column, row: k_row }: ITilePosition = this.sides[\n      \"white\"\n    ].king.location;\n    const kingsMoves = this.possible_moves_from_tile(\n      this.tiles[k_column][k_row]\n    );\n  };\n\n  private map_piece_to_move = (\n    tile_position: ITilePosition,\n    piece: Piece\n  ): ITilePosition[] => {\n    const { row, column } = tile_position;\n    const { side, type } = piece;\n\n    let movablePositions: ITilePosition[] = [];\n\n    switch (type) {\n      case \"bishop\":\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, 1, 1),\n        ];\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, -1, 1),\n        ];\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, 1, -1),\n        ];\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, -1, -1),\n        ];\n        break;\n\n      case \"pawn\":\n        if (true) {\n          //diagonals\n          let ld = {} as ITilePosition;\n          ld.column = side === \"white\" ? 1 : -1;\n          ld.row = side === \"white\" ? 1 : -1;\n          if (\n            !this.position_is_out_of_bounds({\n              column: column + ld.column,\n              row: row + ld.row,\n            }) &&\n            this.tiles[column + ld.column][row + ld.row].piece !== undefined\n          ) {\n            if (\n              this.tiles[column + ld.column][row + ld.row].piece?.side !== side\n            ) {\n              movablePositions = [\n                ...movablePositions,\n                ...this.linear_scan(tile_position, side, 1, 1),\n              ];\n            }\n          }\n          if (\n            !this.position_is_out_of_bounds({\n              column: column - ld.column,\n              row: row + ld.row,\n            }) &&\n            this.tiles[column - ld.column][row + ld.row].piece !== undefined\n          ) {\n            if (\n              this.tiles[column - ld.column][row + ld.row].piece?.side !== side\n            ) {\n              movablePositions = [\n                ...movablePositions,\n                ...this.linear_scan(tile_position, side, -1, 1),\n              ];\n            }\n          }\n        }\n\n        if (!piece.hasMoved) {\n          // console.log(piece.hasMoved);\n\n          movablePositions = [\n            ...movablePositions,\n            ...this.linear_recursive_scan(tile_position, side, 0, 1, 2),\n          ];\n        } else {\n          movablePositions = [\n            ...movablePositions,\n            ...this.linear_recursive_scan(tile_position, side, 0, 1, 1),\n          ];\n        }\n        break;\n\n      case \"queen\":\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, 1, 0),\n        ];\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, -1, 0),\n        ];\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, 0, 1),\n        ];\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, 0, -1),\n        ];\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, 1, 1),\n        ];\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, -1, 1),\n        ];\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, 1, -1),\n        ];\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, -1, -1),\n        ];\n        break;\n\n      case \"rook\":\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, 1, 0),\n        ];\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, -1, 0),\n        ];\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, 0, 1),\n        ];\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, 0, -1),\n        ];\n        break;\n\n      case \"knight\":\n        movablePositions = [\n          ...movablePositions,\n          ...this.radial_scan(tile_position, side, 2, 1),\n        ];\n        break;\n\n      case \"king\":\n        movablePositions = [\n          ...movablePositions,\n          ...this.radial_scan(tile_position, side, 1, 1),\n          ...this.radial_scan(tile_position, side, 1, 0),\n        ];\n\n        if (!piece.hasMoved) {\n          const column_change = side === \"white\" ? 2 : -2;\n\n          if (\n            !this.position_is_out_of_bounds({\n              row,\n              column: column + column_change,\n            }) &&\n            this.tiles[column + column_change][row].piece === undefined\n          ) {\n            movablePositions = [\n              ...movablePositions,\n              ...this.linear_scan(tile_position, side, 2, 0),\n            ];\n          }\n        }\n        break;\n\n      default:\n        break;\n    }\n    return movablePositions;\n  };\n\n  private linear_recursive_scan = (\n    tile_position: ITilePosition,\n    side: string,\n    column_change: number,\n    row_change: number,\n    limit: number = Infinity,\n    count: number = 0\n  ): ITilePosition[] => {\n    count++;\n    const { column, row } = tile_position;\n\n    const new_column =\n      side === \"white\"\n        ? column + column_change * count\n        : column - column_change * count;\n    const new_row =\n      side === \"white\" ? row + row_change * count : row - row_change * count;\n\n    const newPosition: ITilePosition = { column: new_column, row: new_row };\n    const is_out_of_bounds = this.position_is_out_of_bounds(newPosition);\n\n    let positions: ITilePosition[] = [];\n\n    if (!is_out_of_bounds) {\n      let tile = this.tiles[column][row];\n      let next_tile = this.tiles[newPosition.column][newPosition.row];\n\n      if (count <= limit) {\n        if (next_tile.piece === undefined) {\n          positions = [\n            newPosition,\n            ...this.linear_recursive_scan(\n              tile_position,\n              side,\n              column_change,\n              row_change,\n              limit,\n              count\n            ),\n          ];\n        } else if (tile.piece?.side !== next_tile.piece.side) {\n          if (tile.piece?.type === \"pawn\") {\n            return positions;\n          } else {\n            positions = [\n              newPosition,\n              ...this.linear_recursive_scan(\n                tile_position,\n                side,\n                column_change,\n                row_change,\n                count,\n                count\n              ),\n            ];\n          }\n        }\n      }\n    }\n\n    return positions;\n  };\n\n  private linear_scan = (\n    { column, row }: ITilePosition,\n    side: string,\n    column_change: number,\n    row_change: number\n  ) => {\n    let positions: ITilePosition[] = [];\n\n    const new_column =\n      side === \"white\" ? column + column_change : column - column_change;\n    const new_row = side === \"white\" ? row + row_change : row - row_change;\n\n    const newPosition: ITilePosition = { column: new_column, row: new_row };\n\n    const is_out_of_bounds = this.position_is_out_of_bounds(newPosition);\n\n    if (!is_out_of_bounds) {\n      let tile = this.tiles[column][row];\n      let next_tile = this.tiles[newPosition.column][newPosition.row];\n\n      if (next_tile.piece === undefined) {\n        positions = [...positions, newPosition];\n      } else if (tile.piece?.side !== next_tile.piece.side) {\n        positions = [...positions, newPosition];\n      }\n    }\n\n    return positions;\n  };\n\n  private radial_scan = (\n    tile_position: ITilePosition,\n    side: string,\n    column_change: number,\n    row_change: number\n  ): ITilePosition[] => {\n    return [\n      ...this.linear_scan(tile_position, side, column_change, row_change),\n      ...this.linear_scan(tile_position, side, -column_change, -row_change),\n      ...this.linear_scan(tile_position, side, column_change, -row_change),\n      ...this.linear_scan(tile_position, side, -column_change, row_change),\n      ...this.linear_scan(tile_position, side, row_change, column_change),\n      ...this.linear_scan(tile_position, side, -row_change, -column_change),\n      ...this.linear_scan(tile_position, side, row_change, -column_change),\n      ...this.linear_scan(tile_position, side, -row_change, column_change),\n    ];\n  };\n\n  private position_is_out_of_bounds = ({\n    column,\n    row,\n  }: ITilePosition): boolean => {\n    if (column >= 8 || column < 0) {\n      return true;\n    } else if (row >= 8 || row < 0) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n}\n","import React, {\n  FC,\n  MouseEvent,\n  MouseEventHandler,\n  useContext,\n  useEffect,\n  useState,\n} from \"react\";\nimport CSS from \"csstype\";\n\nimport Tile from \"../components/Tile\";\nimport {\n  BoardClass,\n  IMovePiece,\n  ITilePosition,\n  SelectedTile,\n  TileClass,\n  TileData,\n} from \"types/Board\";\n\nimport { TileDataContext } from \"context/Board\";\nimport chess, { Move, Square, GameStatus, PlayedMove } from \"chess\";\n\nimport { maskSideInEnum, SideEnum } from \"types/Side\";\nimport { classic, classic_outlined } from \"designs/pieces\";\n\nimport { calculatePGN, possiblePromotion } from \"utils/Chess\";\nimport { BoardContext } from \"context/Board\";\nimport { io } from \"socket.io-client\";\n\nconst board = new BoardClass(classic);\n\nconst socket = io();\n\nexport interface PlayerSides {\n  white: string;\n  black: string;\n}\n\nconst nodeEnvState = (dev: any, prod: any) => {\n  if (process.env.NODE_ENV === \"development\") {\n    return dev;\n  } else {\n    return prod;\n  }\n};\n\nboard.setSide(nodeEnvState(\"white\", \"\"));\n\nlet gameClient = chess.create({ PGN: true });\n\nconst Board = () => {\n  // const board = useContext(BoardContext);\n\n  const [game_id, set_game_id] = useState(\"\");\n  const [disable_pieces, set_disable_pieces] = useState(false);\n  const [player_side, set_player_side] = useState(nodeEnvState(\"white\", \"\"));\n  const [tiles_jsx, set_tiles_jsx] = useState<JSX.Element[]>();\n  const [selected_tile, set_selected_tile] = useState<Square>();\n  const [turn_to_play, set_turn_to_play] = useState(nodeEnvState(\"white\", \"\"));\n  const [black_king_on_check, set_black_king_on_check] = useState(false);\n  const [white_king_on_check, set_white_king_on_check] = useState(false);\n  const [last_move, set_last_move] = useState<Move>();\n  const [movesToDisplay, setMovesToDisplay] = useState<Square[]>();\n  const [history, setHistory] = useState(gameClient.game.moveHistory);\n  const [kingOnCheck, setKingOnCheck] = useState<Square>();\n  const [promotion, setPromotion] = useState(\"Q\");\n\n  useEffect(() => {\n    socket.on(\"game-id\", (id: string) => {\n      set_game_id(id);\n    });\n\n    socket.on(\"sides\", (sides: PlayerSides) => {\n      if (sides.white === socket.id) {\n        set_player_side(\"white\");\n      } else {\n        set_player_side(\"black\");\n      }\n\n      updateView();\n      console.log(socket.id, sides);\n    });\n\n    socket.on(\"move\", (move: PlayedMove) => {\n      gameClient.move(move.move.algebraic);\n      //set_turn_to_play(turn);\n      console.log(move);\n      updateView();\n    });\n  }, []);\n\n  useEffect(() => {\n    map_tile_data_to_jsx();\n  }, [\n    selected_tile,\n    black_king_on_check,\n    white_king_on_check,\n    player_side,\n    turn_to_play,\n    last_move,\n    movesToDisplay,\n    history,\n  ]);\n\n  useEffect(() => {\n    gameClient.on(\"check\", ({ attackingSquare, kingSquare }) => {\n      console.log(\"The King is under attack!\");\n      setKingOnCheck(kingSquare);\n      console.log(attackingSquare, kingSquare);\n    });\n\n    gameClient.on(\"castle\", (move) => {\n      console.log(\"A castle has occured!\");\n      console.log(move);\n    });\n\n    gameClient.on(\"enPassant\", (move) => {\n      console.log(\"An en Passant has occured!\");\n      console.log(move);\n    });\n\n    gameClient.on(\"promote\", (square) => {\n      console.log(\"A Pawn has been promoted!\");\n      console.log(square);\n    });\n\n    gameClient.on(\"move\", (move) => {\n      console.log(\"A piece was moved!\");\n      socket.emit(\"send-move\", game_id, move);\n      console.log(move);\n    });\n  }, []);\n\n  function map_tile_data_to_jsx(): void {\n    const tilesDiv = gameClient.game.board.squares.map(\n      (tile: Square, i): JSX.Element => {\n        let possibleMoves: Square[] = [];\n        gameClient.validMoves.map((move) => {\n          if (tile.file === move.src.file && tile.rank === move.src.rank)\n            if (possibleMoves !== undefined) {\n              possibleMoves = [...move.squares, ...possibleMoves];\n            } else {\n              possibleMoves = move.squares;\n            }\n        });\n\n        let showPossibleMoveOnThisTile: boolean = false;\n        movesToDisplay?.map((move) => {\n          if (move.file === tile.file && move.rank === tile.rank) {\n            console.log(\"this tile\");\n            showPossibleMoveOnThisTile = true;\n          }\n        });\n\n        return (\n          <Tile\n            key={i}\n            style={{\n              transform:\n                player_side === \"white\" ? \"rotate(90deg)\" : \"rotate(270deg)\",\n            }}\n            tile={tile}\n            moved_last={false}\n            on_check={false}\n            show_move={showPossibleMoveOnThisTile}\n            onClick={(event: MouseEvent) => {\n              if (disable_pieces) return;\n\n              if (showPossibleMoveOnThisTile) {\n                // if (possiblePromotion(selected_tile, tile)) {\n                //   setPromotion(() => {\n                //     const promoteTo = prompt(\n                //       \"what do you want to promote to: (Q, N, R, B)\"\n                //     );\n                //     console.log({ promoteTo });\n                //     return \"B\";\n                //   });\n                //   console.log({ promotion });\n                // }\n                const pgn = calculatePGN(selected_tile, tile, promotion);\n                console.log(pgn);\n                gameClient.move(pgn);\n                setMovesToDisplay([]);\n                updateView();\n                console.log(gameClient.getStatus().notatedMoves);\n              } else if (possibleMoves.length > 0) {\n                set_selected_tile(tile);\n                setMovesToDisplay(possibleMoves);\n              }\n            }}\n          />\n        );\n      }\n    );\n\n    set_tiles_jsx(tilesDiv);\n  }\n\n  const next_turn = () => {\n    return player_side === \"white\" ? \"black\" : \"white\";\n  };\n\n  const updateGameData = () => {\n    setHistory(() => gameClient.game.moveHistory);\n  };\n\n  const updateView = () => {\n    updateGameData();\n    set_last_move(() => history[history.length - 1]);\n  };\n\n  const boardStyle: CSS.Properties = {\n    display: \"grid\",\n    gridTemplateColumns: \"repeat(8, 1fr)\",\n    gridTemplateRows: \"repeat(8, 1fr)\",\n    transform: player_side === \"white\" ? \"rotate(-90deg)\" : \"rotate(90deg)\",\n  };\n\n  return (\n    <div>\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          margin: \"10px 50px\",\n          width: \"100%\",\n        }}\n      >\n        <h6>game_id: {game_id}</h6>\n        <h6>My side:{player_side}</h6>\n        <h6>turn:{turn_to_play}</h6>\n      </div>\n      <TileDataContext.Provider\n        value={{\n          lastMove: last_move,\n          kingOnCheck: gameClient.isCheck ? kingOnCheck : undefined,\n          selectedTile: selected_tile,\n        }}\n      >\n        <div style={boardStyle}>{tiles_jsx}</div>\n      </TileDataContext.Provider>\n    </div>\n  );\n};\n\nexport default Board;\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nimport Board from \"containers/Board\";\n\nimport { classic } from \"designs/pieces\";\nimport { BoardClass } from \"types/Board\";\n\nimport { BoardContext } from \"context/Board\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {/* <BoardContext.Provider> */}\n        <Board />\n        {/* </BoardContext.Provider> */}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}