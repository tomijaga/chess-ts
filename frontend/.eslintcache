[{"/Users/tomijaga/projects/chess-ts/frontend/src/index.tsx":"1","/Users/tomijaga/projects/chess-ts/frontend/src/reportWebVitals.ts":"2","/Users/tomijaga/projects/chess-ts/frontend/src/App.tsx":"3","/Users/tomijaga/projects/chess-ts/frontend/src/containers/Board.tsx":"4","/Users/tomijaga/projects/chess-ts/frontend/src/components/Tile.tsx":"5","/Users/tomijaga/projects/chess-ts/frontend/src/types/Board.ts":"6","/Users/tomijaga/projects/chess-ts/frontend/src/types/Side.ts":"7","/Users/tomijaga/projects/chess-ts/frontend/src/designs/pieces/index.tsx":"8","/Users/tomijaga/projects/chess-ts/frontend/src/context/Board.tsx":"9","/Users/tomijaga/projects/chess-ts/frontend/src/types/Pieces.ts":"10","/Users/tomijaga/projects/chess-ts/frontend/src/utils/Array.tsx":"11","/Users/tomijaga/projects/chess-ts/frontend/src/designs/pieces/classic/index.tsx":"12","/Users/tomijaga/projects/chess-ts/frontend/src/designs/pieces/classic_outlined/index.tsx":"13","/Users/tomijaga/projects/chess-ts/frontend/src/designs/pieces/classic/icons/bishop.tsx":"14","/Users/tomijaga/projects/chess-ts/frontend/src/designs/pieces/classic/icons/king.tsx":"15","/Users/tomijaga/projects/chess-ts/frontend/src/designs/pieces/classic/icons/knight.tsx":"16","/Users/tomijaga/projects/chess-ts/frontend/src/designs/pieces/classic/icons/queen.tsx":"17","/Users/tomijaga/projects/chess-ts/frontend/src/designs/pieces/classic/icons/pawn.tsx":"18","/Users/tomijaga/projects/chess-ts/frontend/src/designs/pieces/classic/icons/rook.tsx":"19","/Users/tomijaga/projects/chess-ts/frontend/src/designs/pieces/classic_outlined/icons/bishop.tsx":"20","/Users/tomijaga/projects/chess-ts/frontend/src/designs/pieces/classic_outlined/icons/king.tsx":"21","/Users/tomijaga/projects/chess-ts/frontend/src/designs/pieces/classic_outlined/icons/knight.tsx":"22","/Users/tomijaga/projects/chess-ts/frontend/src/designs/pieces/classic_outlined/icons/queen.tsx":"23","/Users/tomijaga/projects/chess-ts/frontend/src/designs/pieces/classic_outlined/icons/pawn.tsx":"24","/Users/tomijaga/projects/chess-ts/frontend/src/designs/pieces/classic_outlined/icons/rook.tsx":"25","/Users/tomijaga/projects/chess-ts/frontend/src/utils/Object.tsx":"26","/Users/tomijaga/projects/chess-ts/frontend/src/utils/Chess.tsx":"27","/Users/tomijaga/projects/chess-ts/frontend/src/containers/BotVBotBoard.tsx":"28","/Users/tomijaga/projects/chess-ts/frontend/src/components/ClockTimer.tsx":"29"},{"size":500,"mtime":1613227889315,"results":"30","hashOfConfig":"31"},{"size":425,"mtime":1613227889317,"results":"32","hashOfConfig":"31"},{"size":1529,"mtime":1613601566365,"results":"33","hashOfConfig":"31"},{"size":10366,"mtime":1613610161686,"results":"34","hashOfConfig":"31"},{"size":4502,"mtime":1613494542357,"results":"35","hashOfConfig":"31"},{"size":18087,"mtime":1613486787947,"results":"36","hashOfConfig":"31"},{"size":2723,"mtime":1613406601235,"results":"37","hashOfConfig":"31"},{"size":90,"mtime":1613227889315,"results":"38","hashOfConfig":"31"},{"size":419,"mtime":1613425791005,"results":"39","hashOfConfig":"31"},{"size":1159,"mtime":1613227889319,"results":"40","hashOfConfig":"31"},{"size":327,"mtime":1613406601236,"results":"41","hashOfConfig":"31"},{"size":1223,"mtime":1613227889307,"results":"42","hashOfConfig":"31"},{"size":1232,"mtime":1613227889314,"results":"43","hashOfConfig":"31"},{"size":1123,"mtime":1613227889301,"results":"44","hashOfConfig":"31"},{"size":1037,"mtime":1613227889302,"results":"45","hashOfConfig":"31"},{"size":1554,"mtime":1613227889304,"results":"46","hashOfConfig":"31"},{"size":1403,"mtime":1613227889306,"results":"47","hashOfConfig":"31"},{"size":1207,"mtime":1613227889305,"results":"48","hashOfConfig":"31"},{"size":1213,"mtime":1613227889306,"results":"49","hashOfConfig":"31"},{"size":1683,"mtime":1613227889308,"results":"50","hashOfConfig":"31"},{"size":1502,"mtime":1613227889309,"results":"51","hashOfConfig":"31"},{"size":2381,"mtime":1613227889311,"results":"52","hashOfConfig":"31"},{"size":1495,"mtime":1613227889313,"results":"53","hashOfConfig":"31"},{"size":1794,"mtime":1613227889312,"results":"54","hashOfConfig":"31"},{"size":1898,"mtime":1613227889314,"results":"55","hashOfConfig":"31"},{"size":103,"mtime":1613227889321,"results":"56","hashOfConfig":"31"},{"size":974,"mtime":1613494616076,"results":"57","hashOfConfig":"31"},{"size":6333,"mtime":1613601607321,"results":"58","hashOfConfig":"31"},{"size":2148,"mtime":1613609633340,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"9uf91p",{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"62"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"62"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"62"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"62"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"62"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"90","usedDeprecatedRules":"62"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"93","usedDeprecatedRules":"62"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":37,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"124","messages":"125","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/tomijaga/projects/chess-ts/frontend/src/index.tsx",[],["126","127"],"/Users/tomijaga/projects/chess-ts/frontend/src/reportWebVitals.ts",[],"/Users/tomijaga/projects/chess-ts/frontend/src/App.tsx",["128","129","130","131","132","133","134"],"/Users/tomijaga/projects/chess-ts/frontend/src/containers/Board.tsx",["135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159"],"/Users/tomijaga/projects/chess-ts/frontend/src/components/Tile.tsx",["160","161","162","163"],"import React, { CSSProperties, FC, MouseEvent, useContext } from \"react\";\nimport CSS from \"csstype\";\nimport clsx from \"clsx\";\nimport { Square } from \"chess\";\n\nimport \"./Tile.css\";\nimport { ITilePosition, TileClass } from \"../types/Board\";\nimport { TileDataContext } from \"context/Board\";\n\nimport { classic } from \"designs/pieces\";\nimport { possibleEnPassant } from \"utils/Chess\";\n\nconst PossibleMove: FC<{ capture?: boolean }> = ({ capture }) => {\n  return (\n    <div\n      style={{\n        position: \"absolute\",\n        left: \"50%\",\n      }}\n    >\n      <div\n        style={{\n          width: \"30px\",\n          height: \"30px\",\n          background: capture ? \"rgba(200, 0, 0, 0.5)\" : \"rgba(0, 0, 0, 0.2)\",\n          borderRadius: \"50%\",\n          position: \"relative\",\n          left: \"-50%\",\n        }}\n      />\n    </div>\n  );\n};\n\nconst Tile: FC<{\n  tile: Square;\n  onClick?: (event: MouseEvent) => void;\n  on_check: boolean;\n  moved_last: boolean;\n  show_move: boolean;\n  style: CSSProperties;\n}> = ({ show_move, tile, onClick, on_check, moved_last, style, children }) => {\n  const { lastMove, kingOnCheck, selectedTile, playerSide } = useContext(\n    TileDataContext\n  );\n\n  const determineVariant = () => {\n    const oddAlphabets = [\"a\", \"c\", \"e\", \"g\"];\n\n    if (tile.rank % 2 == 1) {\n      if (oddAlphabets.includes(tile.file)) {\n        return \"--variant1\";\n      } else {\n        return \"--variant2\";\n      }\n    } else {\n      if (oddAlphabets.includes(tile.file)) {\n        return \"--variant2\";\n      } else {\n        return \"--variant1\";\n      }\n    }\n  };\n\n  const tilePiece = () => {\n    if (tile.piece?.side.name === \"white\") {\n      switch (tile.piece.type) {\n        case \"pawn\":\n          return classic.white.pawn;\n        case \"bishop\":\n          return classic.white.bishop;\n        case \"king\":\n          return classic.white.king;\n        case \"queen\":\n          return classic.white.queen;\n        case \"rook\":\n          return classic.white.rook;\n        case \"knight\":\n          return classic.white.knight;\n      }\n    } else if (tile.piece?.side.name === \"black\") {\n      switch (tile.piece.type) {\n        case \"pawn\":\n          return classic.black.pawn;\n        case \"bishop\":\n          return classic.black.bishop;\n        case \"king\":\n          return classic.black.king;\n        case \"queen\":\n          return classic.black.queen;\n        case \"rook\":\n          return classic.black.rook;\n        case \"knight\":\n          return classic.black.knight;\n      }\n    }\n  };\n\n  if (lastMove !== undefined) {\n    moved_last =\n      (lastMove.prevFile === tile.file && lastMove.prevRank === tile.rank) ||\n      (lastMove.postFile === tile.file && lastMove.postRank === tile.rank);\n  }\n\n  if (kingOnCheck !== undefined) {\n    on_check = kingOnCheck.file === tile.file && kingOnCheck.rank === tile.rank;\n  }\n\n  const showEnPassant =\n    selectedTile !== undefined && selectedTile.piece\n      ? possibleEnPassant(selectedTile, tile)\n      : false;\n\n  return (\n    <>\n      <div\n        onClick={onClick}\n        className={clsx(\n          \"tile\",\n          on_check && \"--on-check\",\n          moved_last && \"--moved-last\",\n          !on_check && !moved_last && determineVariant()\n        )}\n        style={{\n          fontSize: \"small\",\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          ...style,\n        }}\n      >\n        {tilePiece()}\n\n        {show_move === true ? (\n          <PossibleMove capture={tile.piece !== null || showEnPassant} />\n        ) : (\n          <></>\n        )}\n\n        {tile.file === \"a\" ? (\n          <div style={{ position: \"absolute\", top: \"5px\", left: \"5px\" }}>\n            {tile.rank}\n          </div>\n        ) : (\n          <></>\n        )}\n\n        {playerSide === \"white\" ? (\n          tile.rank === 1 ? (\n            <div style={{ position: \"absolute\", bottom: \"5px\", right: \"5px\" }}>\n              {tile.file}\n            </div>\n          ) : (\n            <></>\n          )\n        ) : playerSide === \"black\" ? (\n          tile.rank === 8 ? (\n            <div style={{ position: \"absolute\", bottom: \"5px\", right: \"5px\" }}>\n              {tile.file}\n            </div>\n          ) : (\n            <></>\n          )\n        ) : (\n          <></>\n        )}\n\n        {/* <div style={{ position: \"absolute\", bottom: \"0%\", display: \"flex\" }}>\n          {\" \"}\n          <div>[{row}]</div>\n          <div>[{column}]</div>\n        </div> */}\n      </div>\n    </>\n  );\n};\n\nexport default Tile;\n","/Users/tomijaga/projects/chess-ts/frontend/src/types/Board.ts",["164","165","166","167"],"import {\n  collapseTextChangeRangesAcrossMultipleVersions,\n  VoidExpression,\n} from \"typescript\";\nimport { IDesignPieces } from \"./Design\";\nimport { Piece } from \"./Pieces\";\nimport { SideEnum, SideClass } from \"./Side\";\nimport { clone } from \"utils/Object\";\nimport { Move, Square } from \"chess\";\n\nexport interface ITilePosition {\n  row: number;\n  column: number;\n}\n\nexport interface SelectedTile {\n  position: ITilePosition;\n  possible_moves: ITilePosition[];\n}\n\nexport interface IMovePiece {\n  prev: ITilePosition;\n  next: ITilePosition;\n}\n\nexport class TileClass {\n  piece?: Piece;\n  variant: number;\n\n  constructor(variant: number) {\n    this.variant = variant;\n  }\n}\n\nexport interface TileData {\n  lastMove: Move | undefined;\n  kingOnCheck?: Square;\n  selectedTile?: Square;\n  playerSide: string;\n}\n\nconst nodeEnvState = (dev: any, prod: any) => {\n  if (process.env.NODE_ENV === \"development\") {\n    return dev;\n  } else {\n    return prod;\n  }\n};\n\nexport interface BoardSides {\n  white: SideClass;\n  black: SideClass;\n}\n\nexport class BoardClass {\n  player_side: String = \"white\";\n  sides: BoardSides;\n  moves: IMovePiece[] = [];\n  tiles: TileClass[][] = [];\n  onCheck: boolean = false;\n\n  constructor(design: IDesignPieces) {\n    this.sides = {\n      white: new SideClass(design, SideEnum.white),\n      black: new SideClass(design, SideEnum.black),\n    };\n\n    for (let row_index = 0; row_index < 8; row_index++) {\n      let index_on_row: number = 0;\n      const row: TileClass[] = [];\n\n      const row_is_odd: boolean = row_index % 2 === 1;\n\n      while (index_on_row < 8) {\n        const index_is_even = index_on_row % 2 === 0;\n        let variant: number = 1;\n\n        if (row_is_odd) {\n          if (index_is_even) {\n            variant = 2;\n          }\n        } else {\n          if (!index_is_even) {\n            variant = 2;\n          }\n        }\n\n        row.push(new TileClass(variant));\n        index_on_row++;\n      }\n\n      this.tiles.push(row);\n    }\n    console.log(\"Called Constructor\");\n    this.newGame();\n  }\n\n  setSide = (side: String) => {\n    this.player_side = nodeEnvState(\"white\", side);\n  };\n\n  movePiece = (prev: ITilePosition, next: ITilePosition) => {\n    if (!this.position_is_out_of_bounds(next)) {\n      let prev_tile = this.tiles[prev.column][prev.row];\n      let next_tile = this.tiles[next.column][next.row];\n      console.log({ next_tile, prev_tile });\n\n      if (prev_tile.piece) {\n        //Castling\n        // if(prev_tile.piece.type===\"king\" && !prev_tile.piece.hasMoved){\n        //   const next_column_change = prev_tile.piece.side ===\"white\"?2:-2;\n        //   if(next.column === prev.column + next_column_change){\n        //     const column_change_till_edge = prev_tile.piece.side ===\"white\"?3:-3;\n\n        //     const edge_tile = this.tiles[prev.column+column_change_till_edge][prev.row];\n        //     if(edge_tile.piece && edge_tile.piece.type===\"rook\" && !edge_tile.piece.hasMoved){\n\n        //       return;\n        //     }\n        //   }\n\n        // }\n\n        //set Piece hasMove to true\n        if (!prev_tile.piece.hasMoved) prev_tile.piece.hasMoved = true;\n\n        //capture Piece\n        if (next_tile.piece && prev_tile.piece.side !== next_tile.piece.side) {\n          switch (prev_tile.piece.side) {\n            case \"white\":\n              this.sides[\"white\"].capture(next_tile.piece.type);\n\n              break;\n            case \"black\":\n              this.sides[\"black\"].capture(next_tile.piece.type);\n              break;\n\n            default:\n              throw new Error(\"@movePiece. prev_tile's side does not exist \");\n          }\n        }\n\n        //move piece\n        next_tile.piece = prev_tile.piece;\n        next_tile.piece.location = next;\n        prev_tile.piece = undefined;\n        const move: IMovePiece = { prev, next };\n        this.moves.push(move);\n\n        //are the kings on check?\n        this.sides.black.onCheck = this.is_on_check(\"black\");\n        this.sides.white.onCheck = this.is_on_check(\"white\");\n\n        return move;\n      } else {\n        throw new Error(\"There was no Piece on Previous Tile\");\n      }\n    } else {\n      throw new Error(\"Next Position Out of Bounds\");\n    }\n  };\n\n  private clearTiles = () => {\n    this.traverse_tiles((tile) => {\n      tile.piece = undefined;\n    });\n  };\n\n  newGame = () => {\n    this.clearTiles();\n\n    this.tiles[0][0].piece = this.sides.white.rooks[0];\n    this.sides.white.rooks[0].location = { column: 0, row: 0 };\n    this.tiles[1][0].piece = this.sides.white.knights[0];\n    this.sides.white.knights[0].location = { column: 1, row: 0 };\n    this.tiles[2][0].piece = this.sides.white.bishops[0];\n    this.sides.white.bishops[0].location = { column: 2, row: 0 };\n    this.tiles[3][0].piece = this.sides.white.queen;\n    this.sides.white.queen.location = { column: 3, row: 0 };\n    this.tiles[4][0].piece = this.sides.white.king;\n    this.sides.white.king.location = { column: 4, row: 0 };\n    this.tiles[5][0].piece = this.sides.white.bishops[1];\n    this.sides.white.bishops[1].location = { column: 5, row: 0 };\n    this.tiles[6][0].piece = this.sides.white.knights[1];\n    this.sides.white.knights[1].location = { column: 6, row: 0 };\n    this.tiles[7][0].piece = this.sides.white.rooks[1];\n    this.sides.white.rooks[1].location = { column: 7, row: 0 };\n\n    this.tiles[0][7].piece = this.sides.black.rooks[0];\n    this.sides.black.rooks[0].location = { column: 0, row: 7 };\n    this.tiles[1][7].piece = this.sides.black.knights[0];\n    this.sides.black.knights[0].location = { column: 1, row: 7 };\n    this.tiles[2][7].piece = this.sides.black.bishops[0];\n    this.sides.black.bishops[0].location = { column: 2, row: 7 };\n    this.tiles[3][7].piece = this.sides.black.queen;\n    this.sides.black.queen.location = { column: 3, row: 7 };\n    this.tiles[4][7].piece = this.sides.black.king;\n    this.sides.black.king.location = { column: 4, row: 7 };\n    this.tiles[5][7].piece = this.sides.black.bishops[1];\n    this.sides.black.bishops[1].location = { column: 5, row: 7 };\n    this.tiles[6][7].piece = this.sides.black.knights[1];\n    this.sides.black.knights[1].location = { column: 6, row: 7 };\n    this.tiles[7][7].piece = this.sides.black.rooks[1];\n    this.sides.black.rooks[1].location = { column: 7, row: 7 };\n\n    this.set_pawns();\n  };\n\n  private is_on_check = (side: string): boolean => {\n    switch (side) {\n      case \"white\":\n        if (this.sides.white.king.location) {\n          const {\n            column: kings_column,\n            row: kings_row,\n          } = this.sides.white.king.location;\n\n          const pieces = this.sides.black.getPieces();\n\n          for (let i = 0; i < pieces.length; ++i) {\n            const piece = pieces[i];\n            if (piece.location) {\n              const possible_moves = this.possible_moves_from_tile(\n                piece.location\n              );\n\n              for (let j = 0; j < possible_moves.length; ++j) {\n                const move = possible_moves[j];\n                if (move.column === kings_column && move.row === kings_row)\n                  return true;\n              }\n            }\n          }\n        }\n\n        break;\n      case \"black\":\n        if (this.sides.black.king.location) {\n          const {\n            column: kings_column,\n            row: kings_row,\n          } = this.sides.black.king.location;\n\n          const pieces = this.sides.white.getPieces();\n          for (let i = 0; i < pieces.length; ++i) {\n            const piece = pieces[i];\n\n            if (piece.location) {\n              const possible_moves = this.possible_moves_from_tile(\n                piece.location\n              );\n\n              for (let j = 0; j < possible_moves.length; ++j) {\n                const move = possible_moves[j];\n                if (move.column === kings_column && move.row === kings_row)\n                  return true;\n              }\n            }\n          }\n        }\n        break;\n      default:\n        throw Error('parameter side should be either \"white\" or \"black\"');\n    }\n    return false;\n  };\n\n  private set_pawns = () => {\n    for (let index = 0; index < 8; ++index) {\n      this.tiles[index][1].piece = this.sides.white.pawns[index];\n      this.sides.white.pawns[index].location = { column: index, row: 1 };\n\n      this.tiles[index][6].piece = this.sides.black.pawns[index];\n      this.sides.black.pawns[index].location = { column: index, row: 6 };\n    }\n  };\n\n  possible_moves_from_tile = (tile_position: ITilePosition) => {\n    const { column, row } = tile_position;\n\n    const tile = this.tiles[column][row];\n\n    let possible_moves: ITilePosition[] = [];\n\n    if (tile.piece) {\n      possible_moves = this.map_piece_to_move(tile_position, tile.piece);\n    }\n\n    return possible_moves;\n  };\n\n  private traverse_tiles = (action: (tile: TileClass) => void) => {\n    for (let row = 0; row < 8; ++row) {\n      let column: number = 0;\n\n      while (column < 8) {\n        action(this.tiles[column++][row]);\n      }\n    }\n  };\n\n  valid_moves_if_on_check = () => {\n    const { column: k_column, row: k_row }: ITilePosition = this.sides[\n      \"white\"\n    ].king.location;\n    const kingsMoves = this.possible_moves_from_tile(\n      this.tiles[k_column][k_row]\n    );\n  };\n\n  private map_piece_to_move = (\n    tile_position: ITilePosition,\n    piece: Piece\n  ): ITilePosition[] => {\n    const { row, column } = tile_position;\n    const { side, type } = piece;\n\n    let movablePositions: ITilePosition[] = [];\n\n    switch (type) {\n      case \"bishop\":\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, 1, 1),\n        ];\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, -1, 1),\n        ];\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, 1, -1),\n        ];\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, -1, -1),\n        ];\n        break;\n\n      case \"pawn\":\n        if (true) {\n          //diagonals\n          let ld = {} as ITilePosition;\n          ld.column = side === \"white\" ? 1 : -1;\n          ld.row = side === \"white\" ? 1 : -1;\n          if (\n            !this.position_is_out_of_bounds({\n              column: column + ld.column,\n              row: row + ld.row,\n            }) &&\n            this.tiles[column + ld.column][row + ld.row].piece !== undefined\n          ) {\n            if (\n              this.tiles[column + ld.column][row + ld.row].piece?.side !== side\n            ) {\n              movablePositions = [\n                ...movablePositions,\n                ...this.linear_scan(tile_position, side, 1, 1),\n              ];\n            }\n          }\n          if (\n            !this.position_is_out_of_bounds({\n              column: column - ld.column,\n              row: row + ld.row,\n            }) &&\n            this.tiles[column - ld.column][row + ld.row].piece !== undefined\n          ) {\n            if (\n              this.tiles[column - ld.column][row + ld.row].piece?.side !== side\n            ) {\n              movablePositions = [\n                ...movablePositions,\n                ...this.linear_scan(tile_position, side, -1, 1),\n              ];\n            }\n          }\n        }\n\n        if (!piece.hasMoved) {\n          // console.log(piece.hasMoved);\n\n          movablePositions = [\n            ...movablePositions,\n            ...this.linear_recursive_scan(tile_position, side, 0, 1, 2),\n          ];\n        } else {\n          movablePositions = [\n            ...movablePositions,\n            ...this.linear_recursive_scan(tile_position, side, 0, 1, 1),\n          ];\n        }\n        break;\n\n      case \"queen\":\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, 1, 0),\n        ];\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, -1, 0),\n        ];\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, 0, 1),\n        ];\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, 0, -1),\n        ];\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, 1, 1),\n        ];\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, -1, 1),\n        ];\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, 1, -1),\n        ];\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, -1, -1),\n        ];\n        break;\n\n      case \"rook\":\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, 1, 0),\n        ];\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, -1, 0),\n        ];\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, 0, 1),\n        ];\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, 0, -1),\n        ];\n        break;\n\n      case \"knight\":\n        movablePositions = [\n          ...movablePositions,\n          ...this.radial_scan(tile_position, side, 2, 1),\n        ];\n        break;\n\n      case \"king\":\n        movablePositions = [\n          ...movablePositions,\n          ...this.radial_scan(tile_position, side, 1, 1),\n          ...this.radial_scan(tile_position, side, 1, 0),\n        ];\n\n        if (!piece.hasMoved) {\n          const column_change = side === \"white\" ? 2 : -2;\n\n          if (\n            !this.position_is_out_of_bounds({\n              row,\n              column: column + column_change,\n            }) &&\n            this.tiles[column + column_change][row].piece === undefined\n          ) {\n            movablePositions = [\n              ...movablePositions,\n              ...this.linear_scan(tile_position, side, 2, 0),\n            ];\n          }\n        }\n        break;\n\n      default:\n        break;\n    }\n    return movablePositions;\n  };\n\n  private linear_recursive_scan = (\n    tile_position: ITilePosition,\n    side: string,\n    column_change: number,\n    row_change: number,\n    limit: number = Infinity,\n    count: number = 0\n  ): ITilePosition[] => {\n    count++;\n    const { column, row } = tile_position;\n\n    const new_column =\n      side === \"white\"\n        ? column + column_change * count\n        : column - column_change * count;\n    const new_row =\n      side === \"white\" ? row + row_change * count : row - row_change * count;\n\n    const newPosition: ITilePosition = { column: new_column, row: new_row };\n    const is_out_of_bounds = this.position_is_out_of_bounds(newPosition);\n\n    let positions: ITilePosition[] = [];\n\n    if (!is_out_of_bounds) {\n      let tile = this.tiles[column][row];\n      let next_tile = this.tiles[newPosition.column][newPosition.row];\n\n      if (count <= limit) {\n        if (next_tile.piece === undefined) {\n          positions = [\n            newPosition,\n            ...this.linear_recursive_scan(\n              tile_position,\n              side,\n              column_change,\n              row_change,\n              limit,\n              count\n            ),\n          ];\n        } else if (tile.piece?.side !== next_tile.piece.side) {\n          if (tile.piece?.type === \"pawn\") {\n            return positions;\n          } else {\n            positions = [\n              newPosition,\n              ...this.linear_recursive_scan(\n                tile_position,\n                side,\n                column_change,\n                row_change,\n                count,\n                count\n              ),\n            ];\n          }\n        }\n      }\n    }\n\n    return positions;\n  };\n\n  private linear_scan = (\n    { column, row }: ITilePosition,\n    side: string,\n    column_change: number,\n    row_change: number\n  ) => {\n    let positions: ITilePosition[] = [];\n\n    const new_column =\n      side === \"white\" ? column + column_change : column - column_change;\n    const new_row = side === \"white\" ? row + row_change : row - row_change;\n\n    const newPosition: ITilePosition = { column: new_column, row: new_row };\n\n    const is_out_of_bounds = this.position_is_out_of_bounds(newPosition);\n\n    if (!is_out_of_bounds) {\n      let tile = this.tiles[column][row];\n      let next_tile = this.tiles[newPosition.column][newPosition.row];\n\n      if (next_tile.piece === undefined) {\n        positions = [...positions, newPosition];\n      } else if (tile.piece?.side !== next_tile.piece.side) {\n        positions = [...positions, newPosition];\n      }\n    }\n\n    return positions;\n  };\n\n  private radial_scan = (\n    tile_position: ITilePosition,\n    side: string,\n    column_change: number,\n    row_change: number\n  ): ITilePosition[] => {\n    return [\n      ...this.linear_scan(tile_position, side, column_change, row_change),\n      ...this.linear_scan(tile_position, side, -column_change, -row_change),\n      ...this.linear_scan(tile_position, side, column_change, -row_change),\n      ...this.linear_scan(tile_position, side, -column_change, row_change),\n      ...this.linear_scan(tile_position, side, row_change, column_change),\n      ...this.linear_scan(tile_position, side, -row_change, -column_change),\n      ...this.linear_scan(tile_position, side, row_change, -column_change),\n      ...this.linear_scan(tile_position, side, -row_change, column_change),\n    ];\n  };\n\n  private position_is_out_of_bounds = ({\n    column,\n    row,\n  }: ITilePosition): boolean => {\n    if (column >= 8 || column < 0) {\n      return true;\n    } else if (row >= 8 || row < 0) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n}\n","/Users/tomijaga/projects/chess-ts/frontend/src/types/Side.ts",["168"],"import { clone } from \"utils/Object\";\nimport { fillArray } from \"utils/Array\";\nimport { IDesignPieces } from \"./Design\";\nimport { Bishop, King, Knight, Pawn, Piece, Queen, Rook } from \"./Pieces\";\n\nexport class SideClass {\n  pawns: Pawn[] = [];\n  knights: Knight[] = [];\n  king: King;\n  queen: Queen;\n  bishops: Bishop[] = [];\n  rooks: Rook[] = [];\n  capturedPieces: String[] = [];\n  onCheck: boolean = false;\n\n  constructor(design: IDesignPieces, side: number) {\n    let side_string: string = \"white\";\n\n    if (side === 1) {\n      side_string = \"black\";\n    }\n    if (side_string === \"white\") {\n      this.king = new King(design[\"white\"], \"white\");\n      this.queen = new Queen(design[\"white\"], \"white\");\n      this.pawns[0] = new Pawn(design[\"white\"], \"white\");\n      this.pawns[1] = new Pawn(design[\"white\"], \"white\");\n      this.pawns[2] = new Pawn(design[\"white\"], \"white\");\n      this.pawns[3] = new Pawn(design[\"white\"], \"white\");\n      this.pawns[4] = new Pawn(design[\"white\"], \"white\");\n      this.pawns[5] = new Pawn(design[\"white\"], \"white\");\n      this.pawns[6] = new Pawn(design[\"white\"], \"white\");\n      this.pawns[7] = new Pawn(design[\"white\"], \"white\");\n\n      this.knights = fillArray<Pawn>(new Knight(design[\"white\"], \"white\"), 2);\n      this.rooks = fillArray<Pawn>(new Rook(design[\"white\"], \"white\"), 2);\n      this.bishops = fillArray<Pawn>(new Bishop(design[\"white\"], \"white\"), 2);\n    } else {\n      this.king = new King(design[\"black\"], \"black\");\n      this.queen = new Queen(design[\"black\"], \"black\");\n      this.pawns[0] = new Pawn(design[\"black\"], \"black\");\n      this.pawns[1] = new Pawn(design[\"black\"], \"black\");\n      this.pawns[2] = new Pawn(design[\"black\"], \"black\");\n      this.pawns[3] = new Pawn(design[\"black\"], \"black\");\n      this.pawns[4] = new Pawn(design[\"black\"], \"black\");\n      this.pawns[5] = new Pawn(design[\"black\"], \"black\");\n      this.pawns[6] = new Pawn(design[\"black\"], \"black\");\n      this.pawns[7] = new Pawn(design[\"black\"], \"black\");\n      this.knights = fillArray<Pawn>(new Knight(design[\"black\"], \"black\"), 2);\n      this.rooks = fillArray<Pawn>(new Rook(design[\"black\"], \"black\"), 2);\n      this.bishops = fillArray<Pawn>(new Bishop(design[\"black\"], \"black\"), 2);\n    }\n  }\n\n  capture = (piece: String) => {\n    this.capturedPieces.push(piece);\n  };\n\n  getPieces = (): Piece[] => {\n    return [\n      this.king,\n      this.queen,\n      ...this.bishops,\n      ...this.knights,\n      ...this.pawns,\n      ...this.rooks,\n    ];\n  };\n}\n\nexport enum SideEnum {\n  white,\n  black,\n}\n\nexport const maskSideInEnum = (side: string) =>\n  side === \"white\"\n    ? 0\n    : side === \"black\"\n    ? 1\n    : () => {\n        throw new Error('Expecting \"white\" or \"black\" ');\n      };\n","/Users/tomijaga/projects/chess-ts/frontend/src/designs/pieces/index.tsx",[],"/Users/tomijaga/projects/chess-ts/frontend/src/context/Board.tsx",["169"],"import { createContext } from \"react\";\nimport { GameClient } from \"chess\";\nimport { BoardClass, ITilePosition, SelectedTile, TileData } from \"types/Board\";\n\nexport const BoardContext = createContext({} as BoardClass);\n\nexport const SelectedTileContext = createContext({} as SelectedTile);\n\nexport const GameClientContext = createContext({} as GameClient);\n\nexport const TileDataContext = createContext({} as TileData);\n","/Users/tomijaga/projects/chess-ts/frontend/src/types/Pieces.ts",[],"/Users/tomijaga/projects/chess-ts/frontend/src/utils/Array.tsx",["170"],"import { Pawn } from \"types/Pieces\";\nimport { clone } from \"utils/Object\";\n\nexport const fillArray = <T extends unknown>(item: any, size: number): T[] => {\n  const arr: T[] = [];\n\n  for (let i = 0; i < size; i++) {\n    if (typeof item === \"object\") {\n      arr.push(clone(item));\n    }\n    arr.push(item);\n  }\n  return arr;\n};\n","/Users/tomijaga/projects/chess-ts/frontend/src/designs/pieces/classic/index.tsx",["171","172"],"import { BishopIcon } from \"./icons/bishop\";\nimport { KingIcon } from \"./icons/king\";\nimport { KnightIcon } from \"./icons/knight\";\nimport { QueenIcon } from \"./icons/queen\";\nimport { PawnIcon } from \"./icons/pawn\";\nimport { RookIcon } from \"./icons/rook\";\n\nimport { IDesignPieces } from \"types/Design\";\n\nexport const classic: IDesignPieces = {\n  [\"black\"]: {\n    bishop: <BishopIcon className=\"pieces black_pieces\" height={70}/>,\n    king: <KingIcon className=\"pieces black_pieces\"  height={70} />,\n    queen: <QueenIcon className=\"pieces black_pieces\" height={70} />,\n    knight: <KnightIcon className=\"pieces black_pieces\" height={70} />,\n    pawn: <PawnIcon className=\"pieces black_pieces\" height={70} />,\n    rook: <RookIcon className=\"pieces black_pieces\" height={70} />,\n  },\n  [\"white\"]: {\n    bishop: <BishopIcon className=\"pieces white_pieces\" height={70} />,\n    king: <KingIcon className=\"pieces white_pieces\" height={70} />,\n    queen: <QueenIcon className=\"pieces white_pieces\" height={70} />,\n    knight: <KnightIcon className=\"pieces white_pieces\" height={70} />,\n    pawn: <PawnIcon className=\"pieces white_pieces\" height={70} />,\n    rook: <RookIcon className=\"pieces white_pieces\" height={70} />,\n  },\n};\n","/Users/tomijaga/projects/chess-ts/frontend/src/designs/pieces/classic_outlined/index.tsx",["173","174"],"import { BishopIcon } from \"./icons/bishop\";\nimport { KingIcon } from \"./icons/king\";\nimport { KnightIcon } from \"./icons/knight\";\nimport { QueenIcon } from \"./icons/queen\";\nimport { PawnIcon } from \"./icons/pawn\";\nimport { RookIcon } from \"./icons/rook\";\n\nimport { IDesignPieces } from \"types/Design\";\n\nexport const classic_outlined: IDesignPieces = {\n  [\"black\"]: {\n    bishop: <BishopIcon className=\"pieces black_pieces\" height={70}/>,\n    king: <KingIcon className=\"pieces black_pieces\"  height={70} />,\n    queen: <QueenIcon className=\"pieces black_pieces\" height={70} />,\n    knight: <KnightIcon className=\"pieces black_pieces\" height={70} />,\n    pawn: <PawnIcon className=\"pieces black_pieces\" height={70} />,\n    rook: <RookIcon className=\"pieces black_pieces\" height={70} />,\n  },\n  [\"white\"]: {\n    bishop: <BishopIcon className=\"pieces white_pieces\" height={70} />,\n    king: <KingIcon className=\"pieces white_pieces\" height={70} />,\n    queen: <QueenIcon className=\"pieces white_pieces\" height={70} />,\n    knight: <KnightIcon className=\"pieces white_pieces\" height={70} />,\n    pawn: <PawnIcon className=\"pieces white_pieces\" height={70} />,\n    rook: <RookIcon className=\"pieces white_pieces\" height={70} />,\n  },\n};\n","/Users/tomijaga/projects/chess-ts/frontend/src/designs/pieces/classic/icons/bishop.tsx",[],"/Users/tomijaga/projects/chess-ts/frontend/src/designs/pieces/classic/icons/king.tsx",[],"/Users/tomijaga/projects/chess-ts/frontend/src/designs/pieces/classic/icons/knight.tsx",[],"/Users/tomijaga/projects/chess-ts/frontend/src/designs/pieces/classic/icons/queen.tsx",[],"/Users/tomijaga/projects/chess-ts/frontend/src/designs/pieces/classic/icons/pawn.tsx",[],"/Users/tomijaga/projects/chess-ts/frontend/src/designs/pieces/classic/icons/rook.tsx",[],"/Users/tomijaga/projects/chess-ts/frontend/src/designs/pieces/classic_outlined/icons/bishop.tsx",[],"/Users/tomijaga/projects/chess-ts/frontend/src/designs/pieces/classic_outlined/icons/king.tsx",[],"/Users/tomijaga/projects/chess-ts/frontend/src/designs/pieces/classic_outlined/icons/knight.tsx",[],"/Users/tomijaga/projects/chess-ts/frontend/src/designs/pieces/classic_outlined/icons/queen.tsx",[],"/Users/tomijaga/projects/chess-ts/frontend/src/designs/pieces/classic_outlined/icons/pawn.tsx",[],"/Users/tomijaga/projects/chess-ts/frontend/src/designs/pieces/classic_outlined/icons/rook.tsx",[],"/Users/tomijaga/projects/chess-ts/frontend/src/utils/Object.tsx",[],"/Users/tomijaga/projects/chess-ts/frontend/src/utils/Chess.tsx",[],"/Users/tomijaga/projects/chess-ts/frontend/src/containers/BotVBotBoard.tsx",["175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211"],"/Users/tomijaga/projects/chess-ts/frontend/src/components/ClockTimer.tsx",["212","213"],{"ruleId":"214","replacedBy":"215"},{"ruleId":"216","replacedBy":"217"},{"ruleId":"218","severity":1,"message":"219","line":2,"column":8,"nodeType":"220","messageId":"221","endLine":2,"endColumn":12},{"ruleId":"218","severity":1,"message":"222","line":8,"column":10,"nodeType":"220","messageId":"221","endLine":8,"endColumn":17},{"ruleId":"218","severity":1,"message":"223","line":9,"column":10,"nodeType":"220","messageId":"221","endLine":9,"endColumn":20},{"ruleId":"218","severity":1,"message":"224","line":11,"column":10,"nodeType":"220","messageId":"221","endLine":11,"endColumn":22},{"ruleId":"218","severity":1,"message":"225","line":13,"column":27,"nodeType":"220","messageId":"221","endLine":13,"endColumn":33},{"ruleId":"218","severity":1,"message":"226","line":13,"column":35,"nodeType":"220","messageId":"221","endLine":13,"endColumn":40},{"ruleId":"218","severity":1,"message":"227","line":13,"column":42,"nodeType":"220","messageId":"221","endLine":13,"endColumn":49},{"ruleId":"218","severity":1,"message":"228","line":2,"column":3,"nodeType":"220","messageId":"221","endLine":2,"endColumn":5},{"ruleId":"218","severity":1,"message":"229","line":4,"column":3,"nodeType":"220","messageId":"221","endLine":4,"endColumn":20},{"ruleId":"218","severity":1,"message":"230","line":5,"column":3,"nodeType":"220","messageId":"221","endLine":5,"endColumn":13},{"ruleId":"218","severity":1,"message":"223","line":15,"column":3,"nodeType":"220","messageId":"221","endLine":15,"endColumn":13},{"ruleId":"218","severity":1,"message":"231","line":16,"column":3,"nodeType":"220","messageId":"221","endLine":16,"endColumn":13},{"ruleId":"218","severity":1,"message":"232","line":17,"column":3,"nodeType":"220","messageId":"221","endLine":17,"endColumn":16},{"ruleId":"218","severity":1,"message":"233","line":18,"column":3,"nodeType":"220","messageId":"221","endLine":18,"endColumn":15},{"ruleId":"218","severity":1,"message":"234","line":19,"column":3,"nodeType":"220","messageId":"221","endLine":19,"endColumn":12},{"ruleId":"218","severity":1,"message":"235","line":20,"column":3,"nodeType":"220","messageId":"221","endLine":20,"endColumn":11},{"ruleId":"218","severity":1,"message":"236","line":24,"column":31,"nodeType":"220","messageId":"221","endLine":24,"endColumn":41},{"ruleId":"218","severity":1,"message":"237","line":26,"column":10,"nodeType":"220","messageId":"221","endLine":26,"endColumn":24},{"ruleId":"218","severity":1,"message":"238","line":26,"column":26,"nodeType":"220","messageId":"221","endLine":26,"endColumn":34},{"ruleId":"218","severity":1,"message":"222","line":27,"column":10,"nodeType":"220","messageId":"221","endLine":27,"endColumn":17},{"ruleId":"218","severity":1,"message":"239","line":27,"column":19,"nodeType":"220","messageId":"221","endLine":27,"endColumn":35},{"ruleId":"218","severity":1,"message":"240","line":29,"column":10,"nodeType":"220","messageId":"221","endLine":29,"endColumn":22},{"ruleId":"218","severity":1,"message":"241","line":29,"column":24,"nodeType":"220","messageId":"221","endLine":29,"endColumn":41},{"ruleId":"218","severity":1,"message":"224","line":30,"column":10,"nodeType":"220","messageId":"221","endLine":30,"endColumn":22},{"ruleId":"218","severity":1,"message":"242","line":61,"column":10,"nodeType":"220","messageId":"221","endLine":61,"endColumn":19},{"ruleId":"218","severity":1,"message":"243","line":61,"column":21,"nodeType":"220","messageId":"221","endLine":61,"endColumn":33},{"ruleId":"218","severity":1,"message":"244","line":62,"column":10,"nodeType":"220","messageId":"221","endLine":62,"endColumn":20},{"ruleId":"218","severity":1,"message":"245","line":63,"column":10,"nodeType":"220","messageId":"221","endLine":63,"endColumn":21},{"ruleId":"246","severity":1,"message":"247","line":106,"column":6,"nodeType":"248","endLine":115,"endColumn":4,"suggestions":"249"},{"ruleId":"246","severity":1,"message":"250","line":150,"column":6,"nodeType":"248","endLine":150,"endColumn":15,"suggestions":"251"},{"ruleId":"252","severity":1,"message":"253","line":156,"column":42,"nodeType":"254","messageId":"255","endLine":156,"endColumn":44},{"ruleId":"252","severity":1,"message":"253","line":166,"column":36,"nodeType":"254","messageId":"255","endLine":166,"endColumn":38},{"ruleId":"218","severity":1,"message":"256","line":2,"column":8,"nodeType":"220","messageId":"221","endLine":2,"endColumn":11},{"ruleId":"218","severity":1,"message":"232","line":7,"column":10,"nodeType":"220","messageId":"221","endLine":7,"endColumn":23},{"ruleId":"218","severity":1,"message":"234","line":7,"column":25,"nodeType":"220","messageId":"221","endLine":7,"endColumn":34},{"ruleId":"257","severity":1,"message":"258","line":50,"column":23,"nodeType":"259","messageId":"260","endLine":50,"endColumn":25},{"ruleId":"218","severity":1,"message":"261","line":2,"column":3,"nodeType":"220","messageId":"221","endLine":2,"endColumn":49},{"ruleId":"218","severity":1,"message":"262","line":3,"column":3,"nodeType":"220","messageId":"221","endLine":3,"endColumn":17},{"ruleId":"218","severity":1,"message":"263","line":8,"column":10,"nodeType":"220","messageId":"221","endLine":8,"endColumn":15},{"ruleId":"218","severity":1,"message":"264","line":306,"column":11,"nodeType":"220","messageId":"221","endLine":306,"endColumn":21},{"ruleId":"218","severity":1,"message":"263","line":1,"column":10,"nodeType":"220","messageId":"221","endLine":1,"endColumn":15},{"ruleId":"218","severity":1,"message":"232","line":3,"column":22,"nodeType":"220","messageId":"221","endLine":3,"endColumn":35},{"ruleId":"218","severity":1,"message":"265","line":1,"column":10,"nodeType":"220","messageId":"221","endLine":1,"endColumn":14},{"ruleId":"266","severity":1,"message":"267","line":11,"column":3,"nodeType":"268","messageId":"269","endLine":18,"endColumn":4,"fix":"270"},{"ruleId":"266","severity":1,"message":"271","line":19,"column":3,"nodeType":"268","messageId":"269","endLine":26,"endColumn":4,"fix":"272"},{"ruleId":"266","severity":1,"message":"267","line":11,"column":3,"nodeType":"268","messageId":"269","endLine":18,"endColumn":4,"fix":"273"},{"ruleId":"266","severity":1,"message":"271","line":19,"column":3,"nodeType":"268","messageId":"269","endLine":26,"endColumn":4,"fix":"274"},{"ruleId":"218","severity":1,"message":"228","line":2,"column":3,"nodeType":"220","messageId":"221","endLine":2,"endColumn":5},{"ruleId":"218","severity":1,"message":"275","line":3,"column":3,"nodeType":"220","messageId":"221","endLine":3,"endColumn":13},{"ruleId":"218","severity":1,"message":"229","line":4,"column":3,"nodeType":"220","messageId":"221","endLine":4,"endColumn":20},{"ruleId":"218","severity":1,"message":"230","line":5,"column":3,"nodeType":"220","messageId":"221","endLine":5,"endColumn":13},{"ruleId":"218","severity":1,"message":"223","line":13,"column":3,"nodeType":"220","messageId":"221","endLine":13,"endColumn":13},{"ruleId":"218","severity":1,"message":"231","line":14,"column":3,"nodeType":"220","messageId":"221","endLine":14,"endColumn":13},{"ruleId":"218","severity":1,"message":"232","line":15,"column":3,"nodeType":"220","messageId":"221","endLine":15,"endColumn":16},{"ruleId":"218","severity":1,"message":"233","line":16,"column":3,"nodeType":"220","messageId":"221","endLine":16,"endColumn":15},{"ruleId":"218","severity":1,"message":"234","line":17,"column":3,"nodeType":"220","messageId":"221","endLine":17,"endColumn":12},{"ruleId":"218","severity":1,"message":"235","line":18,"column":3,"nodeType":"220","messageId":"221","endLine":18,"endColumn":11},{"ruleId":"218","severity":1,"message":"236","line":22,"column":31,"nodeType":"220","messageId":"221","endLine":22,"endColumn":41},{"ruleId":"218","severity":1,"message":"237","line":24,"column":10,"nodeType":"220","messageId":"221","endLine":24,"endColumn":24},{"ruleId":"218","severity":1,"message":"238","line":24,"column":26,"nodeType":"220","messageId":"221","endLine":24,"endColumn":34},{"ruleId":"218","severity":1,"message":"222","line":25,"column":10,"nodeType":"220","messageId":"221","endLine":25,"endColumn":17},{"ruleId":"218","severity":1,"message":"239","line":25,"column":19,"nodeType":"220","messageId":"221","endLine":25,"endColumn":35},{"ruleId":"218","severity":1,"message":"240","line":27,"column":10,"nodeType":"220","messageId":"221","endLine":27,"endColumn":22},{"ruleId":"218","severity":1,"message":"241","line":27,"column":24,"nodeType":"220","messageId":"221","endLine":27,"endColumn":41},{"ruleId":"218","severity":1,"message":"224","line":28,"column":10,"nodeType":"220","messageId":"221","endLine":28,"endColumn":22},{"ruleId":"218","severity":1,"message":"276","line":47,"column":19,"nodeType":"220","messageId":"221","endLine":47,"endColumn":30},{"ruleId":"218","severity":1,"message":"277","line":48,"column":10,"nodeType":"220","messageId":"221","endLine":48,"endColumn":24},{"ruleId":"218","severity":1,"message":"278","line":48,"column":26,"nodeType":"220","messageId":"221","endLine":48,"endColumn":44},{"ruleId":"218","severity":1,"message":"279","line":49,"column":23,"nodeType":"220","messageId":"221","endLine":49,"endColumn":38},{"ruleId":"218","severity":1,"message":"280","line":51,"column":25,"nodeType":"220","messageId":"221","endLine":51,"endColumn":42},{"ruleId":"218","severity":1,"message":"281","line":52,"column":24,"nodeType":"220","messageId":"221","endLine":52,"endColumn":40},{"ruleId":"218","severity":1,"message":"242","line":56,"column":10,"nodeType":"220","messageId":"221","endLine":56,"endColumn":19},{"ruleId":"218","severity":1,"message":"243","line":56,"column":21,"nodeType":"220","messageId":"221","endLine":56,"endColumn":33},{"ruleId":"218","severity":1,"message":"282","line":57,"column":10,"nodeType":"220","messageId":"221","endLine":57,"endColumn":21},{"ruleId":"218","severity":1,"message":"283","line":58,"column":10,"nodeType":"220","messageId":"221","endLine":58,"endColumn":21},{"ruleId":"218","severity":1,"message":"284","line":59,"column":10,"nodeType":"220","messageId":"221","endLine":59,"endColumn":22},{"ruleId":"218","severity":1,"message":"285","line":60,"column":10,"nodeType":"220","messageId":"221","endLine":60,"endColumn":19},{"ruleId":"218","severity":1,"message":"286","line":60,"column":21,"nodeType":"220","messageId":"221","endLine":60,"endColumn":33},{"ruleId":"246","severity":1,"message":"247","line":64,"column":6,"nodeType":"248","endLine":71,"endColumn":4,"suggestions":"287"},{"ruleId":"246","severity":1,"message":"247","line":126,"column":6,"nodeType":"248","endLine":126,"endColumn":24,"suggestions":"288"},{"ruleId":"252","severity":1,"message":"253","line":132,"column":42,"nodeType":"254","messageId":"255","endLine":132,"endColumn":44},{"ruleId":"218","severity":1,"message":"289","line":162,"column":9,"nodeType":"220","messageId":"221","endLine":162,"endColumn":18},{"ruleId":"218","severity":1,"message":"290","line":170,"column":9,"nodeType":"220","messageId":"221","endLine":170,"endColumn":19},{"ruleId":"218","severity":1,"message":"291","line":193,"column":9,"nodeType":"220","messageId":"221","endLine":193,"endColumn":16},{"ruleId":"218","severity":1,"message":"292","line":8,"column":21,"nodeType":"220","messageId":"221","endLine":8,"endColumn":33},{"ruleId":"246","severity":1,"message":"293","line":34,"column":6,"nodeType":"248","endLine":34,"endColumn":33,"suggestions":"294"},"no-native-reassign",["295"],"no-negated-in-lhs",["296"],"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'classic' is defined but never used.","'BoardClass' is defined but never used.","'BoardContext' is defined but never used.","'Router' is defined but never used.","'Route' is defined but never used.","'NavLink' is defined but never used.","'FC' is defined but never used.","'MouseEventHandler' is defined but never used.","'useContext' is defined but never used.","'IMovePiece' is defined but never used.","'ITilePosition' is defined but never used.","'SelectedTile' is defined but never used.","'TileClass' is defined but never used.","'TileData' is defined but never used.","'GameStatus' is defined but never used.","'maskSideInEnum' is defined but never used.","'SideEnum' is defined but never used.","'classic_outlined' is defined but never used.","'calculatePGN' is defined but never used.","'possiblePromotion' is defined but never used.","'promotion' is assigned a value but never used.","'setPromotion' is assigned a value but never used.","'isGameOver' is assigned a value but never used.","'gameResults' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'map_tile_data_to_jsx'. Either include it or remove the dependency array.","ArrayExpression",["297"],"React Hook useEffect has a missing dependency: 'turn_to_play'. Either include it or remove the dependency array.",["298"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'CSS' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'collapseTextChangeRangesAcrossMultipleVersions' is defined but never used.","'VoidExpression' is defined but never used.","'clone' is defined but never used.","'kingsMoves' is assigned a value but never used.","'Pawn' is defined but never used.","no-useless-computed-key","Unnecessarily computed property [\"black\"] found.","Property","unnecessarilyComputedProperty",{"range":"299","text":"300"},"Unnecessarily computed property [\"white\"] found.",{"range":"301","text":"302"},{"range":"303","text":"300"},{"range":"304","text":"302"},"'MouseEvent' is defined but never used.","'set_game_id' is assigned a value but never used.","'disable_pieces' is assigned a value but never used.","'set_disable_pieces' is assigned a value but never used.","'set_player_side' is assigned a value but never used.","'set_selected_tile' is assigned a value but never used.","'set_turn_to_play' is assigned a value but never used.","'isCheckMate' is assigned a value but never used.","'isStaleMate' is assigned a value but never used.","'isRepitition' is assigned a value but never used.","'pauseGame' is assigned a value but never used.","'setPauseGame' is assigned a value but never used.",["305"],["306"],"'next_turn' is assigned a value but never used.","'updateView' is assigned a value but never used.","'endGame' is assigned a value but never used.","'setStartTime' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'onTimeUp'. Either include it or remove the dependency array. If 'onTimeUp' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["307"],"no-global-assign","no-unsafe-negation",{"desc":"308","fix":"309"},{"desc":"310","fix":"311"},[346,355],"\"black\"",[784,793],"\"white\"",[355,364],[793,802],{"desc":"312","fix":"313"},{"desc":"314","fix":"315"},{"desc":"316","fix":"317"},"Update the dependencies array to be: [selected_tile, player_side, turn_to_play, last_move, movesToDisplay, kingOnCheck, history, disable_pieces, map_tile_data_to_jsx]",{"range":"318","text":"319"},"Update the dependencies array to be: [game_id, turn_to_play]",{"range":"320","text":"321"},"Update the dependencies array to be: [selected_tile, player_side, turn_to_play, last_move, kingOnCheck, history, map_tile_data_to_jsx]",{"range":"322","text":"323"},"Update the dependencies array to be: [game_id, history, map_tile_data_to_jsx]",{"range":"324","text":"325"},"Update the dependencies array to be: [turn_to_play, player_side, onTimeUp]",{"range":"326","text":"327"},[2738,2882],"[selected_tile, player_side, turn_to_play, last_move, movesToDisplay, kingOnCheck, history, disable_pieces, map_tile_data_to_jsx]",[3863,3872],"[game_id, turn_to_play]",[1873,1977],"[selected_tile, player_side, turn_to_play, last_move, kingOnCheck, history, map_tile_data_to_jsx]",[3600,3618],"[game_id, history, map_tile_data_to_jsx]",[1032,1059],"[turn_to_play, player_side, onTimeUp]"]