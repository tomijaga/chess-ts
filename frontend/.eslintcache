[{"/Users/tomijaga/projects/chess-ts/frontend/src/index.tsx":"1","/Users/tomijaga/projects/chess-ts/frontend/src/reportWebVitals.ts":"2","/Users/tomijaga/projects/chess-ts/frontend/src/App.tsx":"3","/Users/tomijaga/projects/chess-ts/frontend/src/components/Tile.tsx":"4","/Users/tomijaga/projects/chess-ts/frontend/src/types/Board.ts":"5","/Users/tomijaga/projects/chess-ts/frontend/src/types/Side.ts":"6","/Users/tomijaga/projects/chess-ts/frontend/src/designs/pieces/index.tsx":"7","/Users/tomijaga/projects/chess-ts/frontend/src/context/Board.tsx":"8","/Users/tomijaga/projects/chess-ts/frontend/src/types/Pieces.ts":"9","/Users/tomijaga/projects/chess-ts/frontend/src/utils/Array.tsx":"10","/Users/tomijaga/projects/chess-ts/frontend/src/designs/pieces/classic/index.tsx":"11","/Users/tomijaga/projects/chess-ts/frontend/src/designs/pieces/classic_outlined/index.tsx":"12","/Users/tomijaga/projects/chess-ts/frontend/src/designs/pieces/classic/icons/bishop.tsx":"13","/Users/tomijaga/projects/chess-ts/frontend/src/designs/pieces/classic/icons/king.tsx":"14","/Users/tomijaga/projects/chess-ts/frontend/src/designs/pieces/classic/icons/knight.tsx":"15","/Users/tomijaga/projects/chess-ts/frontend/src/designs/pieces/classic/icons/queen.tsx":"16","/Users/tomijaga/projects/chess-ts/frontend/src/designs/pieces/classic/icons/pawn.tsx":"17","/Users/tomijaga/projects/chess-ts/frontend/src/designs/pieces/classic/icons/rook.tsx":"18","/Users/tomijaga/projects/chess-ts/frontend/src/designs/pieces/classic_outlined/icons/bishop.tsx":"19","/Users/tomijaga/projects/chess-ts/frontend/src/designs/pieces/classic_outlined/icons/king.tsx":"20","/Users/tomijaga/projects/chess-ts/frontend/src/designs/pieces/classic_outlined/icons/knight.tsx":"21","/Users/tomijaga/projects/chess-ts/frontend/src/designs/pieces/classic_outlined/icons/queen.tsx":"22","/Users/tomijaga/projects/chess-ts/frontend/src/designs/pieces/classic_outlined/icons/pawn.tsx":"23","/Users/tomijaga/projects/chess-ts/frontend/src/designs/pieces/classic_outlined/icons/rook.tsx":"24","/Users/tomijaga/projects/chess-ts/frontend/src/utils/Object.tsx":"25","/Users/tomijaga/projects/chess-ts/frontend/src/utils/Chess.tsx":"26","/Users/tomijaga/projects/chess-ts/frontend/src/containers/BotVBotBoard.tsx":"27","/Users/tomijaga/projects/chess-ts/frontend/src/components/ClockTimer.tsx":"28","/Users/tomijaga/projects/chess-ts/frontend/src/containers/ReplayGameBoard.tsx":"29","/Users/tomijaga/projects/chess-ts/frontend/src/thenewboston/src/index.ts":"30","/Users/tomijaga/projects/chess-ts/frontend/src/thenewboston/src/bank.ts":"31","/Users/tomijaga/projects/chess-ts/frontend/src/thenewboston/src/confirmation-validator.ts":"32","/Users/tomijaga/projects/chess-ts/frontend/src/thenewboston/src/primary-validator.ts":"33","/Users/tomijaga/projects/chess-ts/frontend/src/thenewboston/src/server-node.ts":"34","/Users/tomijaga/projects/chess-ts/frontend/src/thenewboston/src/validator.ts":"35","/Users/tomijaga/projects/chess-ts/frontend/src/thenewboston/src/account.ts":"36","/Users/tomijaga/projects/chess-ts/frontend/src/thenewboston/src/payment-handler.ts":"37","/Users/tomijaga/projects/chess-ts/frontend/src/thenewboston/src/account-payment-handler.ts":"38","/Users/tomijaga/projects/chess-ts/frontend/src/thenewboston/src/models/index.ts":"39","/Users/tomijaga/projects/chess-ts/frontend/src/thenewboston/src/utils/index.ts":"40","/Users/tomijaga/projects/chess-ts/frontend/src/thenewboston/src/models/responses/index.ts":"41","/Users/tomijaga/projects/chess-ts/frontend/src/thenewboston/src/utils/create-account-data.ts":"42","/Users/tomijaga/projects/chess-ts/frontend/src/thenewboston/src/utils/format-default-options.ts":"43","/Users/tomijaga/projects/chess-ts/frontend/src/thenewboston/src/utils/format-url.ts":"44","/Users/tomijaga/projects/chess-ts/frontend/src/thenewboston/src/utils/uint8array-to-hex.ts":"45","/Users/tomijaga/projects/chess-ts/frontend/src/thenewboston/src/utils/hex-to-uint8array.ts":"46","/Users/tomijaga/projects/chess-ts/frontend/src/thenewboston/src/utils/throw-error.ts":"47","/Users/tomijaga/projects/chess-ts/frontend/src/thenewboston/src/models/responses/bank/index.ts":"48","/Users/tomijaga/projects/chess-ts/frontend/src/thenewboston/src/models/responses/confirmation-validator/index.ts":"49","/Users/tomijaga/projects/chess-ts/frontend/src/thenewboston/src/models/responses/pagination/index.ts":"50","/Users/tomijaga/projects/chess-ts/frontend/src/thenewboston/src/models/responses/generic/index.ts":"51","/Users/tomijaga/projects/chess-ts/frontend/src/thenewboston/src/models/responses/primary-validator/index.ts":"52","/Users/tomijaga/projects/chess-ts/frontend/src/thenewboston/src/models/responses/pagination/entries/index.ts":"53","/Users/tomijaga/projects/chess-ts/frontend/src/containers/FriendBoard.tsx":"54","/Users/tomijaga/projects/chess-ts/frontend/src/components/CreateGameForm.tsx":"55","/Users/tomijaga/projects/chess-ts/frontend/src/components/Board.tsx":"56","/Users/tomijaga/projects/chess-ts/frontend/src/containers/Boards/SocketIOBoard.tsx":"57","/Users/tomijaga/projects/chess-ts/frontend/src/containers/Boards/index.tsx":"58","/Users/tomijaga/projects/chess-ts/frontend/src/containers/Boards/TwoPlayerBoard.tsx":"59","/Users/tomijaga/projects/chess-ts/frontend/src/containers/Boards/DisabledBoard.tsx":"60"},{"size":500,"mtime":1613756213567,"results":"61","hashOfConfig":"62"},{"size":425,"mtime":1613227889317,"results":"63","hashOfConfig":"62"},{"size":3666,"mtime":1614131225988,"results":"64","hashOfConfig":"62"},{"size":4457,"mtime":1614085940943,"results":"65","hashOfConfig":"62"},{"size":18087,"mtime":1613486787947,"results":"66","hashOfConfig":"62"},{"size":2723,"mtime":1613406601235,"results":"67","hashOfConfig":"62"},{"size":90,"mtime":1613227889315,"results":"68","hashOfConfig":"62"},{"size":495,"mtime":1614127081222,"results":"69","hashOfConfig":"62"},{"size":1159,"mtime":1613227889319,"results":"70","hashOfConfig":"62"},{"size":327,"mtime":1613406601236,"results":"71","hashOfConfig":"62"},{"size":1223,"mtime":1613227889307,"results":"72","hashOfConfig":"62"},{"size":1232,"mtime":1613227889314,"results":"73","hashOfConfig":"62"},{"size":1123,"mtime":1613227889301,"results":"74","hashOfConfig":"62"},{"size":1037,"mtime":1613227889302,"results":"75","hashOfConfig":"62"},{"size":1554,"mtime":1613227889304,"results":"76","hashOfConfig":"62"},{"size":1403,"mtime":1613227889306,"results":"77","hashOfConfig":"62"},{"size":1207,"mtime":1613227889305,"results":"78","hashOfConfig":"62"},{"size":1213,"mtime":1613227889306,"results":"79","hashOfConfig":"62"},{"size":1683,"mtime":1613227889308,"results":"80","hashOfConfig":"62"},{"size":1502,"mtime":1613227889309,"results":"81","hashOfConfig":"62"},{"size":2381,"mtime":1613227889311,"results":"82","hashOfConfig":"62"},{"size":1495,"mtime":1613227889313,"results":"83","hashOfConfig":"62"},{"size":1794,"mtime":1613227889312,"results":"84","hashOfConfig":"62"},{"size":1898,"mtime":1613227889314,"results":"85","hashOfConfig":"62"},{"size":103,"mtime":1613227889321,"results":"86","hashOfConfig":"62"},{"size":974,"mtime":1613494616076,"results":"87","hashOfConfig":"62"},{"size":6333,"mtime":1613601607321,"results":"88","hashOfConfig":"62"},{"size":2181,"mtime":1614085522831,"results":"89","hashOfConfig":"62"},{"size":7508,"mtime":1613683434160,"results":"90","hashOfConfig":"62"},{"size":420,"mtime":1613741562432,"results":"91","hashOfConfig":"62"},{"size":5036,"mtime":1613741562432,"results":"92","hashOfConfig":"62"},{"size":1852,"mtime":1613741562432,"results":"93","hashOfConfig":"62"},{"size":964,"mtime":1613741562446,"results":"94","hashOfConfig":"62"},{"size":3343,"mtime":1613741562446,"results":"95","hashOfConfig":"62"},{"size":1827,"mtime":1613741562450,"results":"96","hashOfConfig":"62"},{"size":4424,"mtime":1613741562432,"results":"97","hashOfConfig":"62"},{"size":2544,"mtime":1613741562446,"results":"98","hashOfConfig":"62"},{"size":598,"mtime":1613741562431,"results":"99","hashOfConfig":"62"},{"size":620,"mtime":1613741562434,"results":"100","hashOfConfig":"62"},{"size":320,"mtime":1613741562449,"results":"101","hashOfConfig":"62"},{"size":160,"mtime":1613741562438,"results":"102","hashOfConfig":"62"},{"size":620,"mtime":1613741562447,"results":"103","hashOfConfig":"62"},{"size":627,"mtime":1613741562447,"results":"104","hashOfConfig":"62"},{"size":283,"mtime":1613741562447,"results":"105","hashOfConfig":"62"},{"size":162,"mtime":1613741562449,"results":"106","hashOfConfig":"62"},{"size":111,"mtime":1613741562448,"results":"107","hashOfConfig":"62"},{"size":240,"mtime":1613741562449,"results":"108","hashOfConfig":"62"},{"size":52,"mtime":1613741562435,"results":"109","hashOfConfig":"62"},{"size":69,"mtime":1613741562436,"results":"110","hashOfConfig":"62"},{"size":201,"mtime":1613741562441,"results":"111","hashOfConfig":"62"},{"size":139,"mtime":1613741562437,"results":"112","hashOfConfig":"62"},{"size":64,"mtime":1613741562442,"results":"113","hashOfConfig":"62"},{"size":282,"mtime":1613741562439,"results":"114","hashOfConfig":"62"},{"size":10385,"mtime":1614131124386,"results":"115","hashOfConfig":"62"},{"size":2119,"mtime":1614062358839,"results":"116","hashOfConfig":"62"},{"size":8822,"mtime":1614166359151,"results":"117","hashOfConfig":"62"},{"size":1020,"mtime":1614138410429,"results":"118","hashOfConfig":"62"},{"size":103,"mtime":1614090472364,"results":"119","hashOfConfig":"62"},{"size":10921,"mtime":1614174205127,"results":"120","hashOfConfig":"62"},{"size":381,"mtime":1614104347826,"results":"121","hashOfConfig":"62"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},"9uf91p",{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"124"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"124"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"136"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"136"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"124"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"136"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"152","usedDeprecatedRules":"124"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"155","usedDeprecatedRules":"124"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":37,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"188"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"124"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":40,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"188"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"197"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"124"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254","usedDeprecatedRules":"124"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257","usedDeprecatedRules":"124"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},"/Users/tomijaga/projects/chess-ts/frontend/src/index.tsx",[],["262","263"],"/Users/tomijaga/projects/chess-ts/frontend/src/reportWebVitals.ts",[],"/Users/tomijaga/projects/chess-ts/frontend/src/App.tsx",["264","265","266","267","268","269","270","271","272","273","274","275","276","277","278","279","280","281","282"],"import React, { FC, useState, useEffect } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nimport FriendBoard from \"containers/FriendBoard\";\n\nimport BotVBotBoard from \"containers/BotVBotBoard\";\nimport ReplayGameBoard from \"containers/ReplayGameBoard\";\n\nimport CreateGameForm from \"components/CreateGameForm\";\nimport { TwoPlayerBoard } from \"containers/Boards\";\nimport { classic } from \"designs/pieces\";\nimport { BoardClass } from \"types/Board\";\n\nimport { BoardContext } from \"context/Board\";\n\nimport { BrowserRouter as Router, Route, NavLink } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { Move } from \"chess\";\n\nimport {\n  Account,\n  Bank,\n  ConfirmationValidator,\n  PrimaryValidator,\n} from \"thenewboston/src\";\n\ninterface Game {\n  _id: string;\n  players: { white: string; black: string };\n  moveHistory: Move[];\n}\n\nfunction App() {\n  const [boardType, setBoardType] = useState(\"\");\n\n  const [games, setGames] = useState<Game[]>();\n\n  const [selectedGame, setSelectedGame] = useState<Game>();\n\n  // useEffect(() => {\n  //   const SERVER = \"http://localhost:8080\";\n  //   axios.get(`${SERVER}/games`).then((res) => {\n  //     setGames(res.data);\n  //   });\n\n  //   console.log(Bank);\n  // }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div style={{ display: \"flex\", flexWrap: \"wrap\" }}>\n          <button onClick={() => setBoardType(\"friend\")}>Play Friend</button>\n          <button onClick={() => setBoardType(\"online\")}>Play Online</button>\n          <button onClick={() => setBoardType(\"tournament\")}>\n            Play Tournament\n          </button>\n          <button onClick={() => setBoardType(\"botVbot\")}>Bot Vs Bot</button>\n          <button onClick={() => setBoardType(\"watch\")}>Watch Game</button>\n        </div>\n        {/* <BoardContext.Provider> */}\n        {boardType === \"friend\" ? (\n          <>{/* <FriendBoard />\n            <CreateGameForm /> */}</>\n        ) : boardType === \"botVbot\" ? (\n          {\n            /* <BotVBotBoard />*/\n          }\n        ) : boardType === \"online\" ? (\n          <TwoPlayerBoard />\n        ) : boardType === \"tournament\" ? (\n          <div>Coming Soon!</div>\n        ) : boardType === \"watch\" ? (\n          <div>\n            {\" \"}\n            {games?.map((game: any) => {\n              return (\n                <>\n                  {selectedGame !== undefined ? (\n                    {\n                      /* <ReplayGameBoard game={selectedGame} />*/\n                    }\n                  ) : (\n                    <></>\n                  )}\n                  <div\n                    style={{\n                      display: \"flex\",\n                      flexDirection: \"column\",\n                      margin: \"10px\",\n                    }}\n                  >\n                    <div\n                      style={{\n                        margin: \"5px\",\n                        borderRadius: \"3px\",\n                        backgroundColor: \"lightblue\",\n                        padding: \"5px 10px\",\n                        cursor: \"pointer\",\n                        fontSize: \"small\",\n                        color: \"black\",\n                      }}\n                      onClick={() => {\n                        console.log({ game });\n                        setSelectedGame(game);\n                      }}\n                    >\n                      Game ID: {game._id}\n                    </div>\n                  </div>\n                </>\n              );\n            })}\n          </div>\n        ) : (\n          <></>\n        )}\n\n        {/* </BoardContext.Provider> */}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/tomijaga/projects/chess-ts/frontend/src/components/Tile.tsx",["283","284","285","286"],"import React, { CSSProperties, FC, MouseEvent, useContext } from \"react\";\nimport CSS from \"csstype\";\nimport clsx from \"clsx\";\nimport { Square } from \"chess\";\n\nimport \"./Tile.css\";\nimport { ITilePosition, TileClass } from \"../types/Board\";\nimport { TileDataContext } from \"context/Board\";\n\nimport { classic } from \"designs/pieces\";\nimport { possibleEnPassant } from \"utils/Chess\";\n\nconst PossibleMove: FC<{ capture?: boolean }> = ({ capture }) => {\n  return (\n    <div\n      style={{\n        position: \"absolute\",\n        left: \"50%\",\n      }}\n    >\n      <div\n        style={{\n          width: \"30px\",\n          height: \"30px\",\n          background: capture ? \"rgba(200, 0, 0, 0.5)\" : \"rgba(0, 0, 0, 0.2)\",\n          borderRadius: \"50%\",\n          position: \"relative\",\n          left: \"-50%\",\n        }}\n      />\n    </div>\n  );\n};\n\nconst Tile: FC<{\n  tile: Square;\n  onClick?: (event: MouseEvent) => void;\n  on_check: boolean;\n  moved_last: boolean;\n  show_move: boolean;\n  style: CSSProperties;\n}> = ({ show_move, tile, onClick, on_check, moved_last, style, children }) => {\n  const { lastMove, kingOnCheck, selectedTile, playerSide } = useContext(\n    TileDataContext\n  );\n\n  const determineVariant = () => {\n    const oddAlphabets = [\"a\", \"c\", \"e\", \"g\"];\n\n    if (tile.rank % 2 == 1) {\n      if (oddAlphabets.includes(tile.file)) {\n        return \"--variant1\";\n      } else {\n        return \"--variant2\";\n      }\n    } else {\n      if (oddAlphabets.includes(tile.file)) {\n        return \"--variant2\";\n      } else {\n        return \"--variant1\";\n      }\n    }\n  };\n\n  const tilePiece = () => {\n    if (tile.piece?.side.name === \"white\") {\n      switch (tile.piece.type) {\n        case \"pawn\":\n          return classic.white.pawn;\n        case \"bishop\":\n          return classic.white.bishop;\n        case \"king\":\n          return classic.white.king;\n        case \"queen\":\n          return classic.white.queen;\n        case \"rook\":\n          return classic.white.rook;\n        case \"knight\":\n          return classic.white.knight;\n      }\n    } else if (tile.piece?.side.name === \"black\") {\n      switch (tile.piece.type) {\n        case \"pawn\":\n          return classic.black.pawn;\n        case \"bishop\":\n          return classic.black.bishop;\n        case \"king\":\n          return classic.black.king;\n        case \"queen\":\n          return classic.black.queen;\n        case \"rook\":\n          return classic.black.rook;\n        case \"knight\":\n          return classic.black.knight;\n      }\n    }\n  };\n\n  if (lastMove !== undefined) {\n    moved_last =\n      (lastMove.prevSquare.file === tile.file &&\n        lastMove.prevSquare.rank === tile.rank) ||\n      (lastMove.postSquare.file === tile.file &&\n        lastMove.postSquare.rank === tile.rank);\n  }\n\n  if (kingOnCheck !== undefined) {\n    on_check = kingOnCheck.file === tile.file && kingOnCheck.rank === tile.rank;\n  }\n\n  const showEnPassant =\n    selectedTile !== undefined && selectedTile.piece\n      ? possibleEnPassant(selectedTile, tile)\n      : false;\n\n  return (\n    <>\n      <div\n        onClick={onClick}\n        className={clsx(\n          \"tile\",\n          on_check && \"--on-check\",\n          moved_last && \"--moved-last\",\n          !on_check && !moved_last && determineVariant()\n        )}\n        style={{\n          fontSize: \"small\",\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          ...style,\n        }}\n      >\n        {tilePiece()}\n\n        {show_move === true ? (\n          <PossibleMove capture={tile.piece !== null || showEnPassant} />\n        ) : (\n          <></>\n        )}\n\n        {tile.file === \"a\" ? (\n          <div style={{ position: \"absolute\", top: \"5px\", left: \"5px\" }}>\n            {tile.rank}\n          </div>\n        ) : (\n          <></>\n        )}\n\n        {playerSide === \"white\" ? (\n          tile.rank === 1 ? (\n            <div style={{ position: \"absolute\", bottom: \"5px\", right: \"5px\" }}>\n              {tile.file}\n            </div>\n          ) : (\n            <></>\n          )\n        ) : tile.rank === 8 ? (\n          <div style={{ position: \"absolute\", bottom: \"5px\", right: \"5px\" }}>\n            {tile.file}\n          </div>\n        ) : (\n          <></>\n        )}\n\n        {/* <div style={{ position: \"absolute\", bottom: \"0%\", display: \"flex\" }}>\n          {\" \"}\n          <div>[{row}]</div>\n          <div>[{column}]</div>\n        </div> */}\n      </div>\n    </>\n  );\n};\n\nexport default Tile;\n","/Users/tomijaga/projects/chess-ts/frontend/src/types/Board.ts",["287","288","289","290"],"import {\n  collapseTextChangeRangesAcrossMultipleVersions,\n  VoidExpression,\n} from \"typescript\";\nimport { IDesignPieces } from \"./Design\";\nimport { Piece } from \"./Pieces\";\nimport { SideEnum, SideClass } from \"./Side\";\nimport { clone } from \"utils/Object\";\nimport { Move, Square } from \"chess\";\n\nexport interface ITilePosition {\n  row: number;\n  column: number;\n}\n\nexport interface SelectedTile {\n  position: ITilePosition;\n  possible_moves: ITilePosition[];\n}\n\nexport interface IMovePiece {\n  prev: ITilePosition;\n  next: ITilePosition;\n}\n\nexport class TileClass {\n  piece?: Piece;\n  variant: number;\n\n  constructor(variant: number) {\n    this.variant = variant;\n  }\n}\n\nexport interface TileData {\n  lastMove: Move | undefined;\n  kingOnCheck?: Square;\n  selectedTile?: Square;\n  playerSide: string;\n}\n\nconst nodeEnvState = (dev: any, prod: any) => {\n  if (process.env.NODE_ENV === \"development\") {\n    return dev;\n  } else {\n    return prod;\n  }\n};\n\nexport interface BoardSides {\n  white: SideClass;\n  black: SideClass;\n}\n\nexport class BoardClass {\n  player_side: String = \"white\";\n  sides: BoardSides;\n  moves: IMovePiece[] = [];\n  tiles: TileClass[][] = [];\n  onCheck: boolean = false;\n\n  constructor(design: IDesignPieces) {\n    this.sides = {\n      white: new SideClass(design, SideEnum.white),\n      black: new SideClass(design, SideEnum.black),\n    };\n\n    for (let row_index = 0; row_index < 8; row_index++) {\n      let index_on_row: number = 0;\n      const row: TileClass[] = [];\n\n      const row_is_odd: boolean = row_index % 2 === 1;\n\n      while (index_on_row < 8) {\n        const index_is_even = index_on_row % 2 === 0;\n        let variant: number = 1;\n\n        if (row_is_odd) {\n          if (index_is_even) {\n            variant = 2;\n          }\n        } else {\n          if (!index_is_even) {\n            variant = 2;\n          }\n        }\n\n        row.push(new TileClass(variant));\n        index_on_row++;\n      }\n\n      this.tiles.push(row);\n    }\n    console.log(\"Called Constructor\");\n    this.newGame();\n  }\n\n  setSide = (side: String) => {\n    this.player_side = nodeEnvState(\"white\", side);\n  };\n\n  movePiece = (prev: ITilePosition, next: ITilePosition) => {\n    if (!this.position_is_out_of_bounds(next)) {\n      let prev_tile = this.tiles[prev.column][prev.row];\n      let next_tile = this.tiles[next.column][next.row];\n      console.log({ next_tile, prev_tile });\n\n      if (prev_tile.piece) {\n        //Castling\n        // if(prev_tile.piece.type===\"king\" && !prev_tile.piece.hasMoved){\n        //   const next_column_change = prev_tile.piece.side ===\"white\"?2:-2;\n        //   if(next.column === prev.column + next_column_change){\n        //     const column_change_till_edge = prev_tile.piece.side ===\"white\"?3:-3;\n\n        //     const edge_tile = this.tiles[prev.column+column_change_till_edge][prev.row];\n        //     if(edge_tile.piece && edge_tile.piece.type===\"rook\" && !edge_tile.piece.hasMoved){\n\n        //       return;\n        //     }\n        //   }\n\n        // }\n\n        //set Piece hasMove to true\n        if (!prev_tile.piece.hasMoved) prev_tile.piece.hasMoved = true;\n\n        //capture Piece\n        if (next_tile.piece && prev_tile.piece.side !== next_tile.piece.side) {\n          switch (prev_tile.piece.side) {\n            case \"white\":\n              this.sides[\"white\"].capture(next_tile.piece.type);\n\n              break;\n            case \"black\":\n              this.sides[\"black\"].capture(next_tile.piece.type);\n              break;\n\n            default:\n              throw new Error(\"@movePiece. prev_tile's side does not exist \");\n          }\n        }\n\n        //move piece\n        next_tile.piece = prev_tile.piece;\n        next_tile.piece.location = next;\n        prev_tile.piece = undefined;\n        const move: IMovePiece = { prev, next };\n        this.moves.push(move);\n\n        //are the kings on check?\n        this.sides.black.onCheck = this.is_on_check(\"black\");\n        this.sides.white.onCheck = this.is_on_check(\"white\");\n\n        return move;\n      } else {\n        throw new Error(\"There was no Piece on Previous Tile\");\n      }\n    } else {\n      throw new Error(\"Next Position Out of Bounds\");\n    }\n  };\n\n  private clearTiles = () => {\n    this.traverse_tiles((tile) => {\n      tile.piece = undefined;\n    });\n  };\n\n  newGame = () => {\n    this.clearTiles();\n\n    this.tiles[0][0].piece = this.sides.white.rooks[0];\n    this.sides.white.rooks[0].location = { column: 0, row: 0 };\n    this.tiles[1][0].piece = this.sides.white.knights[0];\n    this.sides.white.knights[0].location = { column: 1, row: 0 };\n    this.tiles[2][0].piece = this.sides.white.bishops[0];\n    this.sides.white.bishops[0].location = { column: 2, row: 0 };\n    this.tiles[3][0].piece = this.sides.white.queen;\n    this.sides.white.queen.location = { column: 3, row: 0 };\n    this.tiles[4][0].piece = this.sides.white.king;\n    this.sides.white.king.location = { column: 4, row: 0 };\n    this.tiles[5][0].piece = this.sides.white.bishops[1];\n    this.sides.white.bishops[1].location = { column: 5, row: 0 };\n    this.tiles[6][0].piece = this.sides.white.knights[1];\n    this.sides.white.knights[1].location = { column: 6, row: 0 };\n    this.tiles[7][0].piece = this.sides.white.rooks[1];\n    this.sides.white.rooks[1].location = { column: 7, row: 0 };\n\n    this.tiles[0][7].piece = this.sides.black.rooks[0];\n    this.sides.black.rooks[0].location = { column: 0, row: 7 };\n    this.tiles[1][7].piece = this.sides.black.knights[0];\n    this.sides.black.knights[0].location = { column: 1, row: 7 };\n    this.tiles[2][7].piece = this.sides.black.bishops[0];\n    this.sides.black.bishops[0].location = { column: 2, row: 7 };\n    this.tiles[3][7].piece = this.sides.black.queen;\n    this.sides.black.queen.location = { column: 3, row: 7 };\n    this.tiles[4][7].piece = this.sides.black.king;\n    this.sides.black.king.location = { column: 4, row: 7 };\n    this.tiles[5][7].piece = this.sides.black.bishops[1];\n    this.sides.black.bishops[1].location = { column: 5, row: 7 };\n    this.tiles[6][7].piece = this.sides.black.knights[1];\n    this.sides.black.knights[1].location = { column: 6, row: 7 };\n    this.tiles[7][7].piece = this.sides.black.rooks[1];\n    this.sides.black.rooks[1].location = { column: 7, row: 7 };\n\n    this.set_pawns();\n  };\n\n  private is_on_check = (side: string): boolean => {\n    switch (side) {\n      case \"white\":\n        if (this.sides.white.king.location) {\n          const {\n            column: kings_column,\n            row: kings_row,\n          } = this.sides.white.king.location;\n\n          const pieces = this.sides.black.getPieces();\n\n          for (let i = 0; i < pieces.length; ++i) {\n            const piece = pieces[i];\n            if (piece.location) {\n              const possible_moves = this.possible_moves_from_tile(\n                piece.location\n              );\n\n              for (let j = 0; j < possible_moves.length; ++j) {\n                const move = possible_moves[j];\n                if (move.column === kings_column && move.row === kings_row)\n                  return true;\n              }\n            }\n          }\n        }\n\n        break;\n      case \"black\":\n        if (this.sides.black.king.location) {\n          const {\n            column: kings_column,\n            row: kings_row,\n          } = this.sides.black.king.location;\n\n          const pieces = this.sides.white.getPieces();\n          for (let i = 0; i < pieces.length; ++i) {\n            const piece = pieces[i];\n\n            if (piece.location) {\n              const possible_moves = this.possible_moves_from_tile(\n                piece.location\n              );\n\n              for (let j = 0; j < possible_moves.length; ++j) {\n                const move = possible_moves[j];\n                if (move.column === kings_column && move.row === kings_row)\n                  return true;\n              }\n            }\n          }\n        }\n        break;\n      default:\n        throw Error('parameter side should be either \"white\" or \"black\"');\n    }\n    return false;\n  };\n\n  private set_pawns = () => {\n    for (let index = 0; index < 8; ++index) {\n      this.tiles[index][1].piece = this.sides.white.pawns[index];\n      this.sides.white.pawns[index].location = { column: index, row: 1 };\n\n      this.tiles[index][6].piece = this.sides.black.pawns[index];\n      this.sides.black.pawns[index].location = { column: index, row: 6 };\n    }\n  };\n\n  possible_moves_from_tile = (tile_position: ITilePosition) => {\n    const { column, row } = tile_position;\n\n    const tile = this.tiles[column][row];\n\n    let possible_moves: ITilePosition[] = [];\n\n    if (tile.piece) {\n      possible_moves = this.map_piece_to_move(tile_position, tile.piece);\n    }\n\n    return possible_moves;\n  };\n\n  private traverse_tiles = (action: (tile: TileClass) => void) => {\n    for (let row = 0; row < 8; ++row) {\n      let column: number = 0;\n\n      while (column < 8) {\n        action(this.tiles[column++][row]);\n      }\n    }\n  };\n\n  valid_moves_if_on_check = () => {\n    const { column: k_column, row: k_row }: ITilePosition = this.sides[\n      \"white\"\n    ].king.location;\n    const kingsMoves = this.possible_moves_from_tile(\n      this.tiles[k_column][k_row]\n    );\n  };\n\n  private map_piece_to_move = (\n    tile_position: ITilePosition,\n    piece: Piece\n  ): ITilePosition[] => {\n    const { row, column } = tile_position;\n    const { side, type } = piece;\n\n    let movablePositions: ITilePosition[] = [];\n\n    switch (type) {\n      case \"bishop\":\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, 1, 1),\n        ];\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, -1, 1),\n        ];\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, 1, -1),\n        ];\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, -1, -1),\n        ];\n        break;\n\n      case \"pawn\":\n        if (true) {\n          //diagonals\n          let ld = {} as ITilePosition;\n          ld.column = side === \"white\" ? 1 : -1;\n          ld.row = side === \"white\" ? 1 : -1;\n          if (\n            !this.position_is_out_of_bounds({\n              column: column + ld.column,\n              row: row + ld.row,\n            }) &&\n            this.tiles[column + ld.column][row + ld.row].piece !== undefined\n          ) {\n            if (\n              this.tiles[column + ld.column][row + ld.row].piece?.side !== side\n            ) {\n              movablePositions = [\n                ...movablePositions,\n                ...this.linear_scan(tile_position, side, 1, 1),\n              ];\n            }\n          }\n          if (\n            !this.position_is_out_of_bounds({\n              column: column - ld.column,\n              row: row + ld.row,\n            }) &&\n            this.tiles[column - ld.column][row + ld.row].piece !== undefined\n          ) {\n            if (\n              this.tiles[column - ld.column][row + ld.row].piece?.side !== side\n            ) {\n              movablePositions = [\n                ...movablePositions,\n                ...this.linear_scan(tile_position, side, -1, 1),\n              ];\n            }\n          }\n        }\n\n        if (!piece.hasMoved) {\n          // console.log(piece.hasMoved);\n\n          movablePositions = [\n            ...movablePositions,\n            ...this.linear_recursive_scan(tile_position, side, 0, 1, 2),\n          ];\n        } else {\n          movablePositions = [\n            ...movablePositions,\n            ...this.linear_recursive_scan(tile_position, side, 0, 1, 1),\n          ];\n        }\n        break;\n\n      case \"queen\":\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, 1, 0),\n        ];\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, -1, 0),\n        ];\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, 0, 1),\n        ];\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, 0, -1),\n        ];\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, 1, 1),\n        ];\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, -1, 1),\n        ];\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, 1, -1),\n        ];\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, -1, -1),\n        ];\n        break;\n\n      case \"rook\":\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, 1, 0),\n        ];\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, -1, 0),\n        ];\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, 0, 1),\n        ];\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, 0, -1),\n        ];\n        break;\n\n      case \"knight\":\n        movablePositions = [\n          ...movablePositions,\n          ...this.radial_scan(tile_position, side, 2, 1),\n        ];\n        break;\n\n      case \"king\":\n        movablePositions = [\n          ...movablePositions,\n          ...this.radial_scan(tile_position, side, 1, 1),\n          ...this.radial_scan(tile_position, side, 1, 0),\n        ];\n\n        if (!piece.hasMoved) {\n          const column_change = side === \"white\" ? 2 : -2;\n\n          if (\n            !this.position_is_out_of_bounds({\n              row,\n              column: column + column_change,\n            }) &&\n            this.tiles[column + column_change][row].piece === undefined\n          ) {\n            movablePositions = [\n              ...movablePositions,\n              ...this.linear_scan(tile_position, side, 2, 0),\n            ];\n          }\n        }\n        break;\n\n      default:\n        break;\n    }\n    return movablePositions;\n  };\n\n  private linear_recursive_scan = (\n    tile_position: ITilePosition,\n    side: string,\n    column_change: number,\n    row_change: number,\n    limit: number = Infinity,\n    count: number = 0\n  ): ITilePosition[] => {\n    count++;\n    const { column, row } = tile_position;\n\n    const new_column =\n      side === \"white\"\n        ? column + column_change * count\n        : column - column_change * count;\n    const new_row =\n      side === \"white\" ? row + row_change * count : row - row_change * count;\n\n    const newPosition: ITilePosition = { column: new_column, row: new_row };\n    const is_out_of_bounds = this.position_is_out_of_bounds(newPosition);\n\n    let positions: ITilePosition[] = [];\n\n    if (!is_out_of_bounds) {\n      let tile = this.tiles[column][row];\n      let next_tile = this.tiles[newPosition.column][newPosition.row];\n\n      if (count <= limit) {\n        if (next_tile.piece === undefined) {\n          positions = [\n            newPosition,\n            ...this.linear_recursive_scan(\n              tile_position,\n              side,\n              column_change,\n              row_change,\n              limit,\n              count\n            ),\n          ];\n        } else if (tile.piece?.side !== next_tile.piece.side) {\n          if (tile.piece?.type === \"pawn\") {\n            return positions;\n          } else {\n            positions = [\n              newPosition,\n              ...this.linear_recursive_scan(\n                tile_position,\n                side,\n                column_change,\n                row_change,\n                count,\n                count\n              ),\n            ];\n          }\n        }\n      }\n    }\n\n    return positions;\n  };\n\n  private linear_scan = (\n    { column, row }: ITilePosition,\n    side: string,\n    column_change: number,\n    row_change: number\n  ) => {\n    let positions: ITilePosition[] = [];\n\n    const new_column =\n      side === \"white\" ? column + column_change : column - column_change;\n    const new_row = side === \"white\" ? row + row_change : row - row_change;\n\n    const newPosition: ITilePosition = { column: new_column, row: new_row };\n\n    const is_out_of_bounds = this.position_is_out_of_bounds(newPosition);\n\n    if (!is_out_of_bounds) {\n      let tile = this.tiles[column][row];\n      let next_tile = this.tiles[newPosition.column][newPosition.row];\n\n      if (next_tile.piece === undefined) {\n        positions = [...positions, newPosition];\n      } else if (tile.piece?.side !== next_tile.piece.side) {\n        positions = [...positions, newPosition];\n      }\n    }\n\n    return positions;\n  };\n\n  private radial_scan = (\n    tile_position: ITilePosition,\n    side: string,\n    column_change: number,\n    row_change: number\n  ): ITilePosition[] => {\n    return [\n      ...this.linear_scan(tile_position, side, column_change, row_change),\n      ...this.linear_scan(tile_position, side, -column_change, -row_change),\n      ...this.linear_scan(tile_position, side, column_change, -row_change),\n      ...this.linear_scan(tile_position, side, -column_change, row_change),\n      ...this.linear_scan(tile_position, side, row_change, column_change),\n      ...this.linear_scan(tile_position, side, -row_change, -column_change),\n      ...this.linear_scan(tile_position, side, row_change, -column_change),\n      ...this.linear_scan(tile_position, side, -row_change, column_change),\n    ];\n  };\n\n  private position_is_out_of_bounds = ({\n    column,\n    row,\n  }: ITilePosition): boolean => {\n    if (column >= 8 || column < 0) {\n      return true;\n    } else if (row >= 8 || row < 0) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n}\n",["291","292"],"/Users/tomijaga/projects/chess-ts/frontend/src/types/Side.ts",["293"],"import { clone } from \"utils/Object\";\nimport { fillArray } from \"utils/Array\";\nimport { IDesignPieces } from \"./Design\";\nimport { Bishop, King, Knight, Pawn, Piece, Queen, Rook } from \"./Pieces\";\n\nexport class SideClass {\n  pawns: Pawn[] = [];\n  knights: Knight[] = [];\n  king: King;\n  queen: Queen;\n  bishops: Bishop[] = [];\n  rooks: Rook[] = [];\n  capturedPieces: String[] = [];\n  onCheck: boolean = false;\n\n  constructor(design: IDesignPieces, side: number) {\n    let side_string: string = \"white\";\n\n    if (side === 1) {\n      side_string = \"black\";\n    }\n    if (side_string === \"white\") {\n      this.king = new King(design[\"white\"], \"white\");\n      this.queen = new Queen(design[\"white\"], \"white\");\n      this.pawns[0] = new Pawn(design[\"white\"], \"white\");\n      this.pawns[1] = new Pawn(design[\"white\"], \"white\");\n      this.pawns[2] = new Pawn(design[\"white\"], \"white\");\n      this.pawns[3] = new Pawn(design[\"white\"], \"white\");\n      this.pawns[4] = new Pawn(design[\"white\"], \"white\");\n      this.pawns[5] = new Pawn(design[\"white\"], \"white\");\n      this.pawns[6] = new Pawn(design[\"white\"], \"white\");\n      this.pawns[7] = new Pawn(design[\"white\"], \"white\");\n\n      this.knights = fillArray<Pawn>(new Knight(design[\"white\"], \"white\"), 2);\n      this.rooks = fillArray<Pawn>(new Rook(design[\"white\"], \"white\"), 2);\n      this.bishops = fillArray<Pawn>(new Bishop(design[\"white\"], \"white\"), 2);\n    } else {\n      this.king = new King(design[\"black\"], \"black\");\n      this.queen = new Queen(design[\"black\"], \"black\");\n      this.pawns[0] = new Pawn(design[\"black\"], \"black\");\n      this.pawns[1] = new Pawn(design[\"black\"], \"black\");\n      this.pawns[2] = new Pawn(design[\"black\"], \"black\");\n      this.pawns[3] = new Pawn(design[\"black\"], \"black\");\n      this.pawns[4] = new Pawn(design[\"black\"], \"black\");\n      this.pawns[5] = new Pawn(design[\"black\"], \"black\");\n      this.pawns[6] = new Pawn(design[\"black\"], \"black\");\n      this.pawns[7] = new Pawn(design[\"black\"], \"black\");\n      this.knights = fillArray<Pawn>(new Knight(design[\"black\"], \"black\"), 2);\n      this.rooks = fillArray<Pawn>(new Rook(design[\"black\"], \"black\"), 2);\n      this.bishops = fillArray<Pawn>(new Bishop(design[\"black\"], \"black\"), 2);\n    }\n  }\n\n  capture = (piece: String) => {\n    this.capturedPieces.push(piece);\n  };\n\n  getPieces = (): Piece[] => {\n    return [\n      this.king,\n      this.queen,\n      ...this.bishops,\n      ...this.knights,\n      ...this.pawns,\n      ...this.rooks,\n    ];\n  };\n}\n\nexport enum SideEnum {\n  white,\n  black,\n}\n\nexport const maskSideInEnum = (side: string) =>\n  side === \"white\"\n    ? 0\n    : side === \"black\"\n    ? 1\n    : () => {\n        throw new Error('Expecting \"white\" or \"black\" ');\n      };\n","/Users/tomijaga/projects/chess-ts/frontend/src/designs/pieces/index.tsx",[],"/Users/tomijaga/projects/chess-ts/frontend/src/context/Board.tsx",["294"],"import { createContext } from \"react\";\nimport { GameClient } from \"chess\";\nimport { BoardClass, ITilePosition, SelectedTile, TileData } from \"types/Board\";\n\nexport const BoardContext = createContext({} as BoardClass);\n\nexport const SelectedTileContext = createContext({} as SelectedTile);\n\nexport const GameClientContext = createContext({} as GameClient);\n\nexport const TileDataContext = createContext({} as TileData);\n\nexport const SocketIOContext = createContext({} as SocketIOClient.Socket);\n","/Users/tomijaga/projects/chess-ts/frontend/src/types/Pieces.ts",[],"/Users/tomijaga/projects/chess-ts/frontend/src/utils/Array.tsx",["295"],"import { Pawn } from \"types/Pieces\";\nimport { clone } from \"utils/Object\";\n\nexport const fillArray = <T extends unknown>(item: any, size: number): T[] => {\n  const arr: T[] = [];\n\n  for (let i = 0; i < size; i++) {\n    if (typeof item === \"object\") {\n      arr.push(clone(item));\n    }\n    arr.push(item);\n  }\n  return arr;\n};\n","/Users/tomijaga/projects/chess-ts/frontend/src/designs/pieces/classic/index.tsx",["296","297"],"import { BishopIcon } from \"./icons/bishop\";\nimport { KingIcon } from \"./icons/king\";\nimport { KnightIcon } from \"./icons/knight\";\nimport { QueenIcon } from \"./icons/queen\";\nimport { PawnIcon } from \"./icons/pawn\";\nimport { RookIcon } from \"./icons/rook\";\n\nimport { IDesignPieces } from \"types/Design\";\n\nexport const classic: IDesignPieces = {\n  [\"black\"]: {\n    bishop: <BishopIcon className=\"pieces black_pieces\" height={70}/>,\n    king: <KingIcon className=\"pieces black_pieces\"  height={70} />,\n    queen: <QueenIcon className=\"pieces black_pieces\" height={70} />,\n    knight: <KnightIcon className=\"pieces black_pieces\" height={70} />,\n    pawn: <PawnIcon className=\"pieces black_pieces\" height={70} />,\n    rook: <RookIcon className=\"pieces black_pieces\" height={70} />,\n  },\n  [\"white\"]: {\n    bishop: <BishopIcon className=\"pieces white_pieces\" height={70} />,\n    king: <KingIcon className=\"pieces white_pieces\" height={70} />,\n    queen: <QueenIcon className=\"pieces white_pieces\" height={70} />,\n    knight: <KnightIcon className=\"pieces white_pieces\" height={70} />,\n    pawn: <PawnIcon className=\"pieces white_pieces\" height={70} />,\n    rook: <RookIcon className=\"pieces white_pieces\" height={70} />,\n  },\n};\n","/Users/tomijaga/projects/chess-ts/frontend/src/designs/pieces/classic_outlined/index.tsx",["298","299"],"import { BishopIcon } from \"./icons/bishop\";\nimport { KingIcon } from \"./icons/king\";\nimport { KnightIcon } from \"./icons/knight\";\nimport { QueenIcon } from \"./icons/queen\";\nimport { PawnIcon } from \"./icons/pawn\";\nimport { RookIcon } from \"./icons/rook\";\n\nimport { IDesignPieces } from \"types/Design\";\n\nexport const classic_outlined: IDesignPieces = {\n  [\"black\"]: {\n    bishop: <BishopIcon className=\"pieces black_pieces\" height={70}/>,\n    king: <KingIcon className=\"pieces black_pieces\"  height={70} />,\n    queen: <QueenIcon className=\"pieces black_pieces\" height={70} />,\n    knight: <KnightIcon className=\"pieces black_pieces\" height={70} />,\n    pawn: <PawnIcon className=\"pieces black_pieces\" height={70} />,\n    rook: <RookIcon className=\"pieces black_pieces\" height={70} />,\n  },\n  [\"white\"]: {\n    bishop: <BishopIcon className=\"pieces white_pieces\" height={70} />,\n    king: <KingIcon className=\"pieces white_pieces\" height={70} />,\n    queen: <QueenIcon className=\"pieces white_pieces\" height={70} />,\n    knight: <KnightIcon className=\"pieces white_pieces\" height={70} />,\n    pawn: <PawnIcon className=\"pieces white_pieces\" height={70} />,\n    rook: <RookIcon className=\"pieces white_pieces\" height={70} />,\n  },\n};\n","/Users/tomijaga/projects/chess-ts/frontend/src/designs/pieces/classic/icons/bishop.tsx",[],["300","301"],"/Users/tomijaga/projects/chess-ts/frontend/src/designs/pieces/classic/icons/king.tsx",[],"/Users/tomijaga/projects/chess-ts/frontend/src/designs/pieces/classic/icons/knight.tsx",[],"/Users/tomijaga/projects/chess-ts/frontend/src/designs/pieces/classic/icons/queen.tsx",[],"/Users/tomijaga/projects/chess-ts/frontend/src/designs/pieces/classic/icons/pawn.tsx",[],"/Users/tomijaga/projects/chess-ts/frontend/src/designs/pieces/classic/icons/rook.tsx",[],"/Users/tomijaga/projects/chess-ts/frontend/src/designs/pieces/classic_outlined/icons/bishop.tsx",[],"/Users/tomijaga/projects/chess-ts/frontend/src/designs/pieces/classic_outlined/icons/king.tsx",[],"/Users/tomijaga/projects/chess-ts/frontend/src/designs/pieces/classic_outlined/icons/knight.tsx",[],"/Users/tomijaga/projects/chess-ts/frontend/src/designs/pieces/classic_outlined/icons/queen.tsx",[],"/Users/tomijaga/projects/chess-ts/frontend/src/designs/pieces/classic_outlined/icons/pawn.tsx",[],"/Users/tomijaga/projects/chess-ts/frontend/src/designs/pieces/classic_outlined/icons/rook.tsx",[],"/Users/tomijaga/projects/chess-ts/frontend/src/utils/Object.tsx",[],"/Users/tomijaga/projects/chess-ts/frontend/src/utils/Chess.tsx",[],"/Users/tomijaga/projects/chess-ts/frontend/src/containers/BotVBotBoard.tsx",["302","303","304","305","306","307","308","309","310","311","312","313","314","315","316","317","318","319","320","321","322","323","324","325","326","327","328","329","330","331","332","333","334","335","336","337","338"],"import React, {\n  FC,\n  MouseEvent,\n  MouseEventHandler,\n  useContext,\n  useEffect,\n  useState,\n} from \"react\";\nimport CSS from \"csstype\";\n\nimport Tile from \"../components/Tile\";\nimport {\n  BoardClass,\n  IMovePiece,\n  ITilePosition,\n  SelectedTile,\n  TileClass,\n  TileData,\n} from \"types/Board\";\n\nimport { TileDataContext } from \"context/Board\";\nimport chess, { Move, Square, GameStatus } from \"chess\";\n\nimport { maskSideInEnum, SideEnum } from \"types/Side\";\nimport { classic, classic_outlined } from \"designs/pieces\";\n\nimport { calculatePGN, possiblePromotion } from \"utils/Chess\";\nimport { BoardContext } from \"context/Board\";\nimport { setInterval } from \"timers\";\n\nexport interface PlayerSides {\n  white: string;\n  black: string;\n}\n\nconst nodeEnvState = (dev: any, prod: any) => {\n  if (process.env.NODE_ENV === \"development\") {\n    return dev;\n  } else {\n    return prod;\n  }\n};\n\nlet gameClient = chess.create({ PGN: true });\n\nconst Board = () => {\n  const [game_id, set_game_id] = useState(\"\");\n  const [disable_pieces, set_disable_pieces] = useState(false);\n  const [player_side, set_player_side] = useState(nodeEnvState(\"white\", \"\"));\n  const [tiles_as_jsx, set_tiles_as_jsx] = useState<JSX.Element[]>();\n  const [selected_tile, set_selected_tile] = useState<Square>();\n  const [turn_to_play, set_turn_to_play] = useState(nodeEnvState(\"white\", \"\"));\n  const [last_move, set_last_move] = useState<Move>();\n  const [history, setHistory] = useState(gameClient.game.moveHistory);\n  const [kingOnCheck, setKingOnCheck] = useState<Square>();\n  const [promotion, setPromotion] = useState(\"Q\");\n  const [isCheckMate, setIsCheckMate] = useState(false);\n  const [isStaleMate, setIsStaleMate] = useState(false);\n  const [isRepitition, setIsRepitition] = useState(false);\n  const [pauseGame, setPauseGame] = useState(true);\n\n  useEffect(() => {\n    map_tile_data_to_jsx();\n  }, [\n    selected_tile,\n    player_side,\n    turn_to_play,\n    last_move,\n    kingOnCheck,\n    history,\n  ]);\n\n  useEffect(() => {\n    gameClient.on(\"check\", ({ attackingSquare, kingSquare }) => {\n      console.log(\"The King is under attack!\");\n      setKingOnCheck(kingSquare);\n      console.log(attackingSquare, kingSquare);\n    });\n\n    gameClient.on(\"castle\", (move) => {\n      console.log(\"A castle has occured!\");\n      console.log(move);\n    });\n\n    gameClient.on(\"enPassant\", (move) => {\n      console.log(\"An en Passant has occured!\");\n      console.log(move);\n    });\n\n    gameClient.on(\"promote\", (square) => {\n      console.log(\"A Pawn has been promoted!\");\n      console.log(square);\n    });\n\n    gameClient.on(\"move\", (move) => {\n      console.log(\"A piece was moved!\");\n      if (gameClient.getStatus().isStalemate) {\n        // endGame();\n        setIsStaleMate(true);\n        console.log(\"The game has ended in a Stale mate!\");\n      } else if (gameClient.getStatus().isRepetition) {\n        // endGame();\n        setIsRepitition(true);\n        console.log(\"The game has ended in a 3 fold repetition!\");\n      }\n      map_tile_data_to_jsx();\n      setHistory(() => {\n        const newHistory = gameClient.game.moveHistory;\n        set_last_move(newHistory[newHistory.length - 1]);\n        return newHistory;\n      });\n    });\n\n    gameClient.on(\"capture\", (move) => {\n      console.log(\"A piece has been captured!\");\n      console.log(move);\n    });\n\n    gameClient.on(\"checkmate\", ({ attackingSquare, kingSquare }) => {\n      console.log(\"The game has ended due to checkmate!\");\n      setKingOnCheck(() => kingSquare);\n      setIsCheckMate(true);\n      console.log(kingSquare);\n      // endGame();\n    });\n  }, [game_id, history]);\n\n  function map_tile_data_to_jsx(): void {\n    const tilesDiv = gameClient.game.board.squares.map(\n      (tile: Square, i): JSX.Element => {\n        let possibleMoves: Square[] = [];\n        gameClient.validMoves.map((move) => {\n          if (tile.file === move.src.file && tile.rank === move.src.rank)\n            if (possibleMoves !== undefined) {\n              possibleMoves = [...move.squares, ...possibleMoves];\n            } else {\n              possibleMoves = move.squares;\n            }\n        });\n\n        return (\n          <Tile\n            key={i}\n            style={{\n              transform:\n                player_side === \"white\"\n                  ? \"rotate(180deg) rotateY(180deg)\"\n                  : \"rotate(0deg)\",\n            }}\n            tile={tile}\n            moved_last={false}\n            on_check={false}\n            show_move={false}\n          />\n        );\n      }\n    );\n\n    set_tiles_as_jsx(tilesDiv);\n  }\n\n  const next_turn = () => {\n    return player_side === \"white\" ? \"black\" : \"white\";\n  };\n\n  const updateGameData = () => {\n    setHistory(() => gameClient.game.moveHistory);\n  };\n\n  const updateView = () => {\n    updateGameData();\n    set_last_move(() => history[history.length - 1]);\n  };\n\n  const boardStyle: CSS.Properties = {\n    display: \"grid\",\n    gridTemplateColumns: \"repeat(8, 1fr)\",\n    gridTemplateRows: \"repeat(8, 1fr)\",\n\n    transform: player_side === \"white\" ? \"rotate(180deg) rotateY(180deg)\" : \"\",\n  };\n\n  const randomnMoves = () =>\n    setInterval(() => {\n      const moves = gameClient.getStatus().notatedMoves;\n      const options = Object.keys(moves);\n      const choice = options[Math.floor(Math.random() * options.length)];\n      console.log(choice);\n      gameClient.move(choice);\n    }, 500);\n\n  const startGame = () => randomnMoves();\n  const endGame = () => {\n    clearInterval(randomnMoves());\n  };\n\n  return (\n    <div>\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          margin: \"10px 50px\",\n          width: \"100%\",\n        }}\n      >\n        <h6>game_id: {game_id}</h6>\n        <h6>My side:{player_side}</h6>\n        <h6>turn:{turn_to_play}</h6>\n      </div>\n\n      <TileDataContext.Provider\n        value={{\n          lastMove: last_move,\n          kingOnCheck: gameClient.isCheck ? kingOnCheck : undefined,\n          selectedTile: selected_tile,\n          playerSide: player_side,\n        }}\n      >\n        <div>\n          <button onClick={startGame}>start game!</button>\n          {/* <button onClick={endGame}>End Game</button> */}\n        </div>\n        <div style={boardStyle}>{tiles_as_jsx}</div>\n      </TileDataContext.Provider>\n    </div>\n  );\n};\n\nexport default Board;\n",["339","340"],"/Users/tomijaga/projects/chess-ts/frontend/src/components/ClockTimer.tsx",["341","342"],"import React, { FC, useState, useEffect } from \"react\";\n\nconst ClockTimer: FC<{\n  player_side: string;\n  turn_to_play: string;\n  onTimeUp(winningSide: string): void;\n}> = ({ turn_to_play, player_side, onTimeUp, children }) => {\n  const [startTime, setStartTime] = useState(60 * 10);\n  const [player_1_time, set_player_1_time] = useState(startTime);\n  const [player_2_time, set_player_2_time] = useState(startTime);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (player_side !== \"\") {\n        const calculateTime = (winingSide: string) => (prevTime: number) => {\n          if (prevTime <= 1) {\n            clearInterval(interval);\n            onTimeUp(winingSide);\n          }\n          return prevTime - 1;\n        };\n\n        if (turn_to_play === \"white\") {\n          set_player_1_time(calculateTime(\"white\"));\n        } else if (turn_to_play === \"black\") {\n          set_player_2_time(calculateTime(\"black\"));\n        }\n      }\n    }, 1000);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [turn_to_play, player_side]);\n\n  const timer = (time: string) => (\n    <div\n      style={{\n        width: \"100px\",\n        background: \"rgba(0,0,0, 0.2)\",\n        borderRadius: \"5px\",\n        fontSize: \"20px\",\n        padding: \"5px\",\n      }}\n    >\n      {time}\n    </div>\n  );\n\n  const convertToTime = (timestamp: number) => {\n    const seconds = timestamp % 60;\n    const minutes = ((timestamp / 60) | 0) % 60;\n\n    return minutes + \":\" + (seconds <= 0 ? \"0\" + seconds : seconds);\n  };\n\n  const orientTimer = () => {\n    if (player_side === \"white\") {\n      return (\n        <>\n          {timer(convertToTime(player_2_time))}\n          {children}\n          {timer(convertToTime(player_1_time))}\n        </>\n      );\n    } else {\n      return (\n        <>\n          {timer(convertToTime(player_1_time))}\n          {children}\n          {timer(convertToTime(player_2_time))}\n        </>\n      );\n    }\n  };\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"flex-end\",\n      }}\n    >\n      {orientTimer()}\n    </div>\n  );\n};\n\nexport default ClockTimer;\n","/Users/tomijaga/projects/chess-ts/frontend/src/containers/ReplayGameBoard.tsx",["343","344","345","346","347","348","349","350","351","352","353","354","355","356","357","358","359","360","361","362","363","364","365","366","367","368","369","370","371","372","373","374","375","376","377","378","379","380","381","382"],"import React, {\n  FC,\n  MouseEvent,\n  MouseEventHandler,\n  useContext,\n  useEffect,\n  useState,\n} from \"react\";\nimport CSS from \"csstype\";\n\nimport Tile from \"../components/Tile\";\nimport {\n  BoardClass,\n  IMovePiece,\n  ITilePosition,\n  SelectedTile,\n  TileClass,\n  TileData,\n} from \"types/Board\";\n\nimport { TileDataContext } from \"context/Board\";\nimport chess, { Move, Square, GameStatus } from \"chess\";\n\nimport { maskSideInEnum, SideEnum } from \"types/Side\";\nimport { classic, classic_outlined } from \"designs/pieces\";\n\nimport { calculatePGN, possiblePromotion } from \"utils/Chess\";\nimport { BoardContext } from \"context/Board\";\nimport { io } from \"socket.io-client\";\nimport { setInterval } from \"timers\";\n\nexport interface PlayerSides {\n  white: string;\n  black: string;\n}\n\nconst nodeEnvState = (dev: any, prod: any) => {\n  if (process.env.NODE_ENV === \"development\") {\n    return dev;\n  } else {\n    return prod;\n  }\n};\n\nlet gameClient = chess.create({ PGN: true });\n\ninterface Game {\n  _id: string;\n  players: { white: string; black: string };\n  moveHistory: Move[];\n}\n\nconst Board: FC<{ game: Game }> = ({ game }) => {\n  const [game_id, set_game_id] = useState(\"\");\n  const [disable_pieces, set_disable_pieces] = useState(false);\n  const [player_side, set_player_side] = useState(nodeEnvState(\"white\", \"\"));\n  const [tiles_as_jsx, set_tiles_as_jsx] = useState<JSX.Element[]>();\n  const [selected_tile, set_selected_tile] = useState<Square>();\n  const [turn_to_play, set_turn_to_play] = useState(nodeEnvState(\"white\", \"\"));\n  const [last_move, set_last_move] = useState<Move>();\n  const [history, setHistory] = useState(gameClient.game.moveHistory);\n  const [kingOnCheck, setKingOnCheck] = useState<Square>();\n  const [promotion, setPromotion] = useState(\"Q\");\n  const [isCheckMate, setIsCheckMate] = useState(false);\n  const [isStaleMate, setIsStaleMate] = useState(false);\n  const [isRepitition, setIsRepitition] = useState(false);\n  const [pauseGame, setPauseGame] = useState(true);\n  const [winner, setWinner] = useState(\"\");\n\n  const [playButton, setPlayButton] = useState(false);\n  const [moveIndex, setMoveIndex] = useState(0);\n  const [storeIndex, setStoreIndex] = useState(0);\n  const [speed, setSpeed] = useState(1000);\n\n  useEffect(() => {\n    let i = moveIndex;\n    const withinHistoryLimits = i < game?.moveHistory.length && i >= 0;\n\n    const interval = setInterval(() => {\n      if (playButton === true && withinHistoryLimits) {\n        gameClient.move(game?.moveHistory[i++].algebraic);\n        console.log(playButton);\n\n        setStoreIndex(() => i);\n      }\n      // else if (playButton === false ) {\n      //   if(){\n\n      //   }\n      // }\n    }, 1000);\n\n    // clearInterval(interval);\n    return () => {\n      clearInterval(interval);\n    };\n  }, [moveIndex, speed, playButton]);\n\n  useEffect(() => {\n    map_tile_data_to_jsx();\n  }, [\n    selected_tile,\n    player_side,\n    turn_to_play,\n    last_move,\n    kingOnCheck,\n    history,\n  ]);\n\n  useEffect(() => {\n    gameClient.on(\"check\", ({ attackingSquare, kingSquare }) => {\n      console.log(\"The King is under attack!\");\n      setKingOnCheck(kingSquare);\n      console.log(attackingSquare, kingSquare);\n    });\n\n    gameClient.on(\"castle\", (move) => {\n      console.log(\"A castle has occured!\");\n      console.log(move);\n    });\n\n    gameClient.on(\"enPassant\", (move) => {\n      console.log(\"An en Passant has occured!\");\n      console.log(move);\n    });\n\n    gameClient.on(\"promote\", (square) => {\n      console.log(\"A Pawn has been promoted!\");\n      console.log(square);\n    });\n\n    gameClient.on(\"move\", (move) => {\n      console.log(\"A piece was moved!\");\n      if (gameClient.getStatus().isStalemate) {\n        // endGame();\n        setIsStaleMate(true);\n        console.log(\"The game has ended in a Stale mate!\");\n      } else if (gameClient.getStatus().isRepetition) {\n        // endGame();\n        setIsRepitition(true);\n        console.log(\"The game has ended in a 3 fold repetition!\");\n      }\n      map_tile_data_to_jsx();\n      setHistory(() => {\n        const newHistory = gameClient.game.moveHistory;\n        set_last_move(newHistory[newHistory.length - 1]);\n        return newHistory;\n      });\n    });\n\n    gameClient.on(\"capture\", (move) => {\n      console.log(\"A piece has been captured!\");\n      console.log(move);\n    });\n\n    gameClient.on(\"checkmate\", ({ attackingSquare, kingSquare }) => {\n      console.log(\"The game has ended due to checkmate!\");\n      setKingOnCheck(() => kingSquare);\n      setIsCheckMate(true);\n      console.log(kingSquare);\n      // endGame();\n    });\n  }, [game_id, history]);\n\n  function map_tile_data_to_jsx(): void {\n    const tilesDiv = gameClient.game.board.squares.map(\n      (tile: Square, i): JSX.Element => {\n        let possibleMoves: Square[] = [];\n        gameClient.validMoves.map((move) => {\n          if (tile.file === move.src.file && tile.rank === move.src.rank)\n            if (possibleMoves !== undefined) {\n              possibleMoves = [...move.squares, ...possibleMoves];\n            } else {\n              possibleMoves = move.squares;\n            }\n        });\n\n        return (\n          <Tile\n            key={i}\n            style={{\n              transform:\n                player_side === \"white\"\n                  ? \"rotate(180deg) rotateY(180deg)\"\n                  : \"rotate(0deg)\",\n            }}\n            tile={tile}\n            moved_last={false}\n            on_check={false}\n            show_move={false}\n          />\n        );\n      }\n    );\n\n    set_tiles_as_jsx(tilesDiv);\n  }\n\n  const next_turn = () => {\n    return player_side === \"white\" ? \"black\" : \"white\";\n  };\n\n  const updateGameData = () => {\n    setHistory(() => gameClient.game.moveHistory);\n  };\n\n  const updateView = () => {\n    updateGameData();\n    set_last_move(() => history[history.length - 1]);\n  };\n\n  const boardStyle: CSS.Properties = {\n    display: \"grid\",\n    gridTemplateColumns: \"repeat(8, 1fr)\",\n    gridTemplateRows: \"repeat(8, 1fr)\",\n\n    transform: player_side === \"white\" ? \"rotate(180deg) rotateY(180deg)\" : \"\",\n  };\n\n  const retrieveStoredIndex = () => {\n    setMoveIndex(storeIndex);\n  };\n  return (\n    <div>\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          margin: \"10px 50px\",\n          width: \"100%\",\n        }}\n      >\n        <h6>game_id: {game_id}</h6>\n        <h6>My side:{player_side}</h6>\n        <h6>turn:{turn_to_play}</h6>\n      </div>\n\n      <TileDataContext.Provider\n        value={{\n          lastMove: last_move,\n          kingOnCheck: gameClient.isCheck ? kingOnCheck : undefined,\n          selectedTile: selected_tile,\n          playerSide: player_side,\n        }}\n      >\n        <div>\n          <button>first move</button>\n\n          <button>previous move</button>\n\n          <button\n            onClick={() => {\n              setPlayButton((prevValue) => !prevValue);\n              retrieveStoredIndex();\n            }}\n          >\n            {playButton ? \"pause game\" : \"start game!\"}\n          </button>\n\n          <button\n            onClick={() => {\n              setMoveIndex(storeIndex + 1);\n              setPlayButton((prevValue) => !prevValue);\n            }}\n          >\n            next move\n          </button>\n\n          <button>last move</button>\n\n          {/* <button onClick={endGame}>End Game</button> */}\n        </div>\n        <div style={boardStyle}>{tiles_as_jsx}</div>\n      </TileDataContext.Provider>\n    </div>\n  );\n};\n\nexport default Board;\n","/Users/tomijaga/projects/chess-ts/frontend/src/thenewboston/src/index.ts",[],["383","384"],"/Users/tomijaga/projects/chess-ts/frontend/src/thenewboston/src/bank.ts",[],"/Users/tomijaga/projects/chess-ts/frontend/src/thenewboston/src/confirmation-validator.ts",["385"],"import { Validator } from \"./validator\";\nimport type { Account } from \"./account\";\nimport type { ConfirmationValidatorConfigResponse, PaginatedResponse } from \"./models\";\n\n/** Used for connecting with and using confirmation validator server nodes. */\nexport class ConfirmationValidator extends Validator {\n  /** Gets the current confirmation confirmation validator's listed services. */\n  async getBankConfirmationServices() {\n    return await super.getData(\"/bank_confirmation_services\");\n  }\n\n  // TODO: POST /confirmation_blocks\n\n  /**\n   * Sends a notification to the bank that a primary validator has left the network.\n   * @param ipAddress the ip address of the primary validator that is leaving\n   * @param port the port that the primary validator is on\n   * @param protocol the protocol of the primary validator\n   * @param account the account that the current `ConfirmationValidator` is connected to\n   */\n  async sendPrimaryValidatorUpdatedPing(ipAddress: string, port: string, protocol: string, account: Account) {\n    return await super.postData(\n      \"/primary_validator_updated\",\n      account.createSignedMessage({ ip_address: ipAddress, port, protocol })\n    );\n  }\n\n  /**\n   * Sends a signed POST request to the confirmation validator for an upgrade request.\n   * @param nodeIdentifier the node identifier of the confirmation validator that is receiving the upgrade notice\n   * @param account the current confirmation validator server's account\n   */\n  async sendUpgradeRequest(nodeIdentifier: string, account: Account) {\n    return await super.postData(\n      \"/upgrade_request\",\n      account.createSignedMessage({ validator_node_identifier: nodeIdentifier })\n    );\n  }\n\n  /** Gets the current confirmation validator's config data. */\n  async getConfig() {\n    return super._getConfig<ConfirmationValidatorConfigResponse>();\n  }\n}\n","/Users/tomijaga/projects/chess-ts/frontend/src/thenewboston/src/primary-validator.ts",[],"/Users/tomijaga/projects/chess-ts/frontend/src/thenewboston/src/server-node.ts",[],"/Users/tomijaga/projects/chess-ts/frontend/src/thenewboston/src/validator.ts",[],"/Users/tomijaga/projects/chess-ts/frontend/src/thenewboston/src/account.ts",[],"/Users/tomijaga/projects/chess-ts/frontend/src/thenewboston/src/payment-handler.ts",[],"/Users/tomijaga/projects/chess-ts/frontend/src/thenewboston/src/account-payment-handler.ts",[],"/Users/tomijaga/projects/chess-ts/frontend/src/thenewboston/src/models/index.ts",[],"/Users/tomijaga/projects/chess-ts/frontend/src/thenewboston/src/utils/index.ts",[],"/Users/tomijaga/projects/chess-ts/frontend/src/thenewboston/src/models/responses/index.ts",[],"/Users/tomijaga/projects/chess-ts/frontend/src/thenewboston/src/utils/create-account-data.ts",[],"/Users/tomijaga/projects/chess-ts/frontend/src/thenewboston/src/utils/format-default-options.ts",[],"/Users/tomijaga/projects/chess-ts/frontend/src/thenewboston/src/utils/format-url.ts",[],"/Users/tomijaga/projects/chess-ts/frontend/src/thenewboston/src/utils/uint8array-to-hex.ts",[],"/Users/tomijaga/projects/chess-ts/frontend/src/thenewboston/src/utils/hex-to-uint8array.ts",[],"/Users/tomijaga/projects/chess-ts/frontend/src/thenewboston/src/utils/throw-error.ts",[],"/Users/tomijaga/projects/chess-ts/frontend/src/thenewboston/src/models/responses/bank/index.ts",[],"/Users/tomijaga/projects/chess-ts/frontend/src/thenewboston/src/models/responses/confirmation-validator/index.ts",[],"/Users/tomijaga/projects/chess-ts/frontend/src/thenewboston/src/models/responses/pagination/index.ts",[],"/Users/tomijaga/projects/chess-ts/frontend/src/thenewboston/src/models/responses/generic/index.ts",[],"/Users/tomijaga/projects/chess-ts/frontend/src/thenewboston/src/models/responses/primary-validator/index.ts",[],"/Users/tomijaga/projects/chess-ts/frontend/src/thenewboston/src/models/responses/pagination/entries/index.ts",[],"/Users/tomijaga/projects/chess-ts/frontend/src/containers/FriendBoard.tsx",["386","387","388","389","390","391","392","393","394","395","396","397","398","399","400","401","402","403","404","405","406","407","408","409","410"],"/Users/tomijaga/projects/chess-ts/frontend/src/components/CreateGameForm.tsx",[],"/Users/tomijaga/projects/chess-ts/frontend/src/components/Board.tsx",["411","412","413","414","415","416","417","418","419","420","421","422","423","424","425","426","427","428","429","430","431","432","433","434","435","436","437","438","439"],"import React, {\n  FC,\n  MouseEvent,\n  MouseEventHandler,\n  useContext,\n  useEffect,\n  useState,\n} from \"react\";\nimport CSS from \"csstype\";\n\nimport ClockTimer from \"components/ClockTimer\";\nimport Tile from \"components/Tile\";\n\nimport {\n  BoardClass,\n  IMovePiece,\n  ITilePosition,\n  SelectedTile,\n  TileClass,\n  TileData,\n} from \"types/Board\";\n\nimport {\n  GameClientContext,\n  SocketIOContext,\n  TileDataContext,\n} from \"context/Board\";\nimport chess, { Move, Square, GameStatus, PlayedMove, Piece } from \"chess\";\n\nimport { GameResults, PlayedMoveMove, PlayerSides, Side } from \"types/Board\";\nimport { maskSideInEnum, SideEnum } from \"types/Side\";\nimport { classic, classic_outlined } from \"designs/pieces\";\n\nimport { calculatePGN, possiblePromotion } from \"utils/Chess\";\nimport { BoardContext } from \"context/Board\";\n\nconst nodeEnvState = (dev: any, prod: any) => {\n  if (process.env.NODE_ENV === \"development\") {\n    return dev;\n  } else {\n    return prod;\n  }\n};\n\nconst Board: FC<{\n  gameId: string;\n  playerSide: string;\n  type?: string;\n  undo?(): void;\n  onGameEnd?(results: GameResults): void;\n  clockTimer?: number;\n  disableBoard?: boolean;\n}> = ({ gameId, playerSide, onGameEnd, clockTimer, disableBoard = false }) => {\n  const [game_id, set_game_id] = useState(gameId);\n  const [disable_pieces, set_disable_pieces] = useState(disableBoard);\n  const [player_side, set_player_side] = useState<Side>(\n    nodeEnvState(\"\", playerSide)\n  );\n  const [tiles_as_jsx, set_tiles_as_jsx] = useState<JSX.Element[]>();\n  const [selected_tile, set_selected_tile] = useState<Square>();\n  const [turn_to_play, set_turn_to_play] = useState<Side>(\"white\");\n  const [last_move, set_last_move] = useState<PlayedMoveMove>();\n  const [movesToDisplay, setMovesToDisplay] = useState<Square[]>();\n  const [history, setHistory] = useState<PlayedMove[]>([]);\n  const [kingOnCheck, setKingOnCheck] = useState<Square>();\n  const [promotion, setPromotion] = useState(\"Q\");\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [gameResults, setGameResults] = useState<{\n    winingSide: string;\n    endedBy: string;\n  }>();\n\n  const gameClient = useContext(GameClientContext);\n  const socket = useContext(SocketIOContext);\n\n  const gameOver = (endedBy: string, winingSide: Side) => {\n    set_disable_pieces(() => true);\n    setIsGameOver(() => true);\n    const results: GameResults = { endedBy, winingSide };\n    setGameResults(results);\n    console.log(results);\n    if (onGameEnd) {\n      onGameEnd(results);\n    }\n  };\n\n  const undo = () => {\n    console.log(gameClient.game.moveHistory);\n\n    if (history.length > 0) {\n      const tempMoves = history;\n      console.log(tempMoves);\n\n      const lastMove = tempMoves[tempMoves.length - 1];\n\n      lastMove.undo();\n      tempMoves.pop();\n      setHistory(tempMoves);\n\n      console.log({ history: gameClient.game.moveHistory });\n      console.log({ notatedMoves: gameClient.getStatus().notatedMoves });\n    }\n  };\n\n  useEffect(() => {\n    map_tile_data_to_jsx();\n  }, [\n    selected_tile,\n    player_side,\n    turn_to_play,\n    last_move,\n    movesToDisplay,\n    kingOnCheck,\n    history,\n    disable_pieces,\n  ]);\n\n  useEffect(() => {\n    if (gameClient) {\n      gameClient.on(\"check\", ({ attackingSquare, kingSquare }) => {\n        console.log(\"The King is under attack!\");\n        setKingOnCheck(kingSquare);\n        console.log(attackingSquare, kingSquare);\n      });\n\n      gameClient.on(\"castle\", (move) => {\n        console.log(\"A castle has occured!\");\n        console.log(move);\n      });\n\n      gameClient.on(\"enPassant\", (move) => {\n        console.log(\"An en Passant has occured!\");\n        console.log(move);\n      });\n\n      gameClient.on(\"promote\", (square) => {\n        console.log(\"A Pawn has been promoted!\");\n        console.log(square);\n      });\n\n      gameClient.on(\"capture\", (move) => {\n        console.log(\"A piece has been captured!\");\n        console.log(move);\n      });\n\n      gameClient.on(\"move\", (move) => {\n        setHistory((prev) => [...prev, move]);\n        set_turn_to_play(next_turn());\n        map_tile_data_to_jsx();\n      });\n\n      gameClient.on(\"checkmate\", ({ attackingSquare, kingSquare }) => {\n        console.log(\"The game has ended due to checkmate!\");\n        setKingOnCheck(() => kingSquare);\n        gameOver(\"Check Mate\", turn_to_play);\n        console.log(kingSquare);\n      });\n    }\n  }, []);\n\n  function map_tile_data_to_jsx(): void {\n    const tilesDiv = gameClient.game.board.squares.map(\n      (tile: Square, i): JSX.Element => {\n        let possibleMoves: Square[] = [];\n        gameClient.validMoves.map((move) => {\n          if (tile.file === move.src.file && tile.rank === move.src.rank)\n            if (possibleMoves !== undefined) {\n              possibleMoves = [...move.squares, ...possibleMoves];\n            } else {\n              possibleMoves = move.squares;\n            }\n        });\n\n        let showPossibleMoveOnThisTile: boolean = false;\n        movesToDisplay?.map((move) => {\n          if (move.file === tile.file && move.rank === tile.rank) {\n            showPossibleMoveOnThisTile = true;\n          }\n        });\n\n        return (\n          <Tile\n            key={i}\n            style={{\n              transform:\n                player_side === \"white\"\n                  ? \"rotate(180deg) rotateY(180deg)\"\n                  : \"rotate(0deg)\",\n            }}\n            tile={tile}\n            moved_last={false}\n            on_check={false}\n            show_move={showPossibleMoveOnThisTile}\n            onClick={(event: MouseEvent) => {\n              if (disable_pieces) return;\n\n              if (showPossibleMoveOnThisTile) {\n                // const pgn = calculatePGN(selected_tile, tile, promotion);\n                const moves = gameClient.getStatus().notatedMoves;\n                const pgn = Object.keys(moves).find((key) => {\n                  const { dest, src } = moves[key];\n                  return (\n                    dest.file === tile.file &&\n                    dest.rank === tile.rank &&\n                    src.file === selected_tile.file &&\n                    src.rank === selected_tile.rank\n                  );\n                });\n\n                const move = gameClient.move(pgn);\n                setHistory((prev) => [...prev, move]);\n                console.log(move);\n\n                if (socket) {\n                  socket.emit(\"send-move\", game_id, move.move, next_turn());\n                }\n\n                setMovesToDisplay([]);\n                set_turn_to_play(next_turn());\n                set_selected_tile(undefined);\n                updateView();\n                // console.log(gameClient.getStatus().notatedMoves);\n              } else if (possibleMoves.length > 0) {\n                if (\n                  tile.piece !== undefined &&\n                  nodeEnvState(\"\", tile.piece.side.name) ===\n                    nodeEnvState(\"\", player_side)\n                ) {\n                  set_selected_tile(tile);\n                  setMovesToDisplay(possibleMoves);\n                }\n              }\n            }}\n          />\n        );\n      }\n    );\n\n    set_tiles_as_jsx(tilesDiv);\n  }\n\n  const next_turn = () => {\n    return history.length % 2 === 0 ? \"white\" : \"black\";\n  };\n\n  const updateView = () => {\n    if (history.length > 0) {\n      const lastMove = history[history.length - 1].move;\n\n      set_last_move(lastMove);\n    }\n  };\n\n  const boardStyle: CSS.Properties = {\n    display: \"grid\",\n    gridTemplateColumns: \"repeat(8, 1fr)\",\n    gridTemplateRows: \"repeat(8, 1fr)\",\n    transform: player_side === \"white\" ? \"rotate(180deg) rotateY(180deg)\" : \"\",\n  };\n\n  return (\n    <div>\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          margin: \"10px 50px\",\n          width: \"100%\",\n          flexWrap: \"wrap\",\n        }}\n      >\n        <h6>game_id: {game_id}</h6>\n        <h6>My side:{player_side}</h6>\n        <h6>turn:{turn_to_play}</h6>\n        <button onClick={() => undo()}>Undo</button>\n      </div>\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          justifyContent: \"right\",\n        }}\n      >\n        <TileDataContext.Provider\n          value={{\n            lastMove: last_move,\n            kingOnCheck: gameClient.isCheck ? kingOnCheck : undefined,\n            selectedTile: selected_tile,\n            playerSide: player_side,\n          }}\n        >\n          <ClockTimer\n            onTimeUp={(winingSide: Side) => {\n              gameOver(\"Time Up\", winingSide);\n            }}\n            player_side={player_side}\n            turn_to_play={turn_to_play}\n          >\n            <div style={boardStyle}>{tiles_as_jsx}</div>\n          </ClockTimer>\n        </TileDataContext.Provider>\n      </div>\n    </div>\n  );\n};\n\nexport default Board;\n","/Users/tomijaga/projects/chess-ts/frontend/src/containers/Boards/SocketIOBoard.tsx",["440","441","442","443","444","445","446"],"import React, { FC, useContext, useEffect, useState } from \"react\";\nimport chess, { Move, Square, GameStatus, PlayedMove, Piece } from \"chess\";\n\nimport Board from \"components/Board\";\nimport { GameClientContext, SocketIOContext } from \"context/Board\";\nimport { PlayerSides } from \"types/Board\";\n\nconst gameClient = chess.create({ PGN: true });\n\nconst SocketIOBoard: FC<{\n  gameId: string;\n  playerSide: string;\n  opponent: string;\n  username: string;\n}> = (props) => {\n  useEffect(() => {\n    console.log(\"initialising Game...\");\n    startGame();\n\n    console.log(props);\n  }, []);\n\n  const socket = useContext(SocketIOContext);\n\n  const startGame = () => {\n    socket.on(\"move\", (move: Move, turn: string) => {\n      console.log(\"socketIOSentMove\", move);\n      console.log(\"algebraic\", move.algebraic);\n      gameClient.move(move.algebraic);\n    });\n  };\n\n  return (\n    <GameClientContext.Provider value={gameClient}>\n      <Board {...props} />\n    </GameClientContext.Provider>\n  );\n};\n\nexport default SocketIOBoard;\n","/Users/tomijaga/projects/chess-ts/frontend/src/containers/Boards/index.tsx",["447"],"import React from \"react\";\n\nimport TwoPlayerBoard from \"./TwoPlayerBoard\";\n\nexport { TwoPlayerBoard };\n","/Users/tomijaga/projects/chess-ts/frontend/src/containers/Boards/TwoPlayerBoard.tsx",["448"],"/Users/tomijaga/projects/chess-ts/frontend/src/containers/Boards/DisabledBoard.tsx",[],{"ruleId":"449","replacedBy":"450"},{"ruleId":"451","replacedBy":"452"},{"ruleId":"453","severity":1,"message":"454","line":1,"column":17,"nodeType":"455","messageId":"456","endLine":1,"endColumn":19},{"ruleId":"453","severity":1,"message":"457","line":1,"column":31,"nodeType":"455","messageId":"456","endLine":1,"endColumn":40},{"ruleId":"453","severity":1,"message":"458","line":2,"column":8,"nodeType":"455","messageId":"456","endLine":2,"endColumn":12},{"ruleId":"453","severity":1,"message":"459","line":5,"column":8,"nodeType":"455","messageId":"456","endLine":5,"endColumn":19},{"ruleId":"453","severity":1,"message":"460","line":7,"column":8,"nodeType":"455","messageId":"456","endLine":7,"endColumn":20},{"ruleId":"453","severity":1,"message":"461","line":8,"column":8,"nodeType":"455","messageId":"456","endLine":8,"endColumn":23},{"ruleId":"453","severity":1,"message":"462","line":10,"column":8,"nodeType":"455","messageId":"456","endLine":10,"endColumn":22},{"ruleId":"453","severity":1,"message":"463","line":12,"column":10,"nodeType":"455","messageId":"456","endLine":12,"endColumn":17},{"ruleId":"453","severity":1,"message":"464","line":13,"column":10,"nodeType":"455","messageId":"456","endLine":13,"endColumn":20},{"ruleId":"453","severity":1,"message":"465","line":15,"column":10,"nodeType":"455","messageId":"456","endLine":15,"endColumn":22},{"ruleId":"453","severity":1,"message":"466","line":17,"column":27,"nodeType":"455","messageId":"456","endLine":17,"endColumn":33},{"ruleId":"453","severity":1,"message":"467","line":17,"column":35,"nodeType":"455","messageId":"456","endLine":17,"endColumn":40},{"ruleId":"453","severity":1,"message":"468","line":17,"column":42,"nodeType":"455","messageId":"456","endLine":17,"endColumn":49},{"ruleId":"453","severity":1,"message":"469","line":18,"column":8,"nodeType":"455","messageId":"456","endLine":18,"endColumn":13},{"ruleId":"453","severity":1,"message":"470","line":22,"column":3,"nodeType":"455","messageId":"456","endLine":22,"endColumn":10},{"ruleId":"453","severity":1,"message":"471","line":23,"column":3,"nodeType":"455","messageId":"456","endLine":23,"endColumn":7},{"ruleId":"453","severity":1,"message":"472","line":24,"column":3,"nodeType":"455","messageId":"456","endLine":24,"endColumn":24},{"ruleId":"453","severity":1,"message":"473","line":25,"column":3,"nodeType":"455","messageId":"456","endLine":25,"endColumn":19},{"ruleId":"453","severity":1,"message":"474","line":37,"column":17,"nodeType":"455","messageId":"456","endLine":37,"endColumn":25},{"ruleId":"453","severity":1,"message":"475","line":2,"column":8,"nodeType":"455","messageId":"456","endLine":2,"endColumn":11},{"ruleId":"453","severity":1,"message":"476","line":7,"column":10,"nodeType":"455","messageId":"456","endLine":7,"endColumn":23},{"ruleId":"453","severity":1,"message":"477","line":7,"column":25,"nodeType":"455","messageId":"456","endLine":7,"endColumn":34},{"ruleId":"478","severity":1,"message":"479","line":50,"column":23,"nodeType":"480","messageId":"481","endLine":50,"endColumn":25},{"ruleId":"453","severity":1,"message":"482","line":2,"column":3,"nodeType":"455","messageId":"456","endLine":2,"endColumn":49},{"ruleId":"453","severity":1,"message":"483","line":3,"column":3,"nodeType":"455","messageId":"456","endLine":3,"endColumn":17},{"ruleId":"453","severity":1,"message":"484","line":8,"column":10,"nodeType":"455","messageId":"456","endLine":8,"endColumn":15},{"ruleId":"453","severity":1,"message":"485","line":306,"column":11,"nodeType":"455","messageId":"456","endLine":306,"endColumn":21},{"ruleId":"449","replacedBy":"486"},{"ruleId":"451","replacedBy":"487"},{"ruleId":"453","severity":1,"message":"484","line":1,"column":10,"nodeType":"455","messageId":"456","endLine":1,"endColumn":15},{"ruleId":"453","severity":1,"message":"476","line":3,"column":22,"nodeType":"455","messageId":"456","endLine":3,"endColumn":35},{"ruleId":"453","severity":1,"message":"488","line":1,"column":10,"nodeType":"455","messageId":"456","endLine":1,"endColumn":14},{"ruleId":"489","severity":1,"message":"490","line":11,"column":3,"nodeType":"491","messageId":"492","endLine":18,"endColumn":4,"fix":"493"},{"ruleId":"489","severity":1,"message":"494","line":19,"column":3,"nodeType":"491","messageId":"492","endLine":26,"endColumn":4,"fix":"495"},{"ruleId":"489","severity":1,"message":"490","line":11,"column":3,"nodeType":"491","messageId":"492","endLine":18,"endColumn":4,"fix":"496"},{"ruleId":"489","severity":1,"message":"494","line":19,"column":3,"nodeType":"491","messageId":"492","endLine":26,"endColumn":4,"fix":"497"},{"ruleId":"449","replacedBy":"498"},{"ruleId":"451","replacedBy":"499"},{"ruleId":"453","severity":1,"message":"454","line":2,"column":3,"nodeType":"455","messageId":"456","endLine":2,"endColumn":5},{"ruleId":"453","severity":1,"message":"500","line":3,"column":3,"nodeType":"455","messageId":"456","endLine":3,"endColumn":13},{"ruleId":"453","severity":1,"message":"501","line":4,"column":3,"nodeType":"455","messageId":"456","endLine":4,"endColumn":20},{"ruleId":"453","severity":1,"message":"502","line":5,"column":3,"nodeType":"455","messageId":"456","endLine":5,"endColumn":13},{"ruleId":"453","severity":1,"message":"464","line":13,"column":3,"nodeType":"455","messageId":"456","endLine":13,"endColumn":13},{"ruleId":"453","severity":1,"message":"503","line":14,"column":3,"nodeType":"455","messageId":"456","endLine":14,"endColumn":13},{"ruleId":"453","severity":1,"message":"476","line":15,"column":3,"nodeType":"455","messageId":"456","endLine":15,"endColumn":16},{"ruleId":"453","severity":1,"message":"504","line":16,"column":3,"nodeType":"455","messageId":"456","endLine":16,"endColumn":15},{"ruleId":"453","severity":1,"message":"477","line":17,"column":3,"nodeType":"455","messageId":"456","endLine":17,"endColumn":12},{"ruleId":"453","severity":1,"message":"505","line":18,"column":3,"nodeType":"455","messageId":"456","endLine":18,"endColumn":11},{"ruleId":"453","severity":1,"message":"506","line":22,"column":31,"nodeType":"455","messageId":"456","endLine":22,"endColumn":41},{"ruleId":"453","severity":1,"message":"507","line":24,"column":10,"nodeType":"455","messageId":"456","endLine":24,"endColumn":24},{"ruleId":"453","severity":1,"message":"508","line":24,"column":26,"nodeType":"455","messageId":"456","endLine":24,"endColumn":34},{"ruleId":"453","severity":1,"message":"463","line":25,"column":10,"nodeType":"455","messageId":"456","endLine":25,"endColumn":17},{"ruleId":"453","severity":1,"message":"509","line":25,"column":19,"nodeType":"455","messageId":"456","endLine":25,"endColumn":35},{"ruleId":"453","severity":1,"message":"510","line":27,"column":10,"nodeType":"455","messageId":"456","endLine":27,"endColumn":22},{"ruleId":"453","severity":1,"message":"511","line":27,"column":24,"nodeType":"455","messageId":"456","endLine":27,"endColumn":41},{"ruleId":"453","severity":1,"message":"465","line":28,"column":10,"nodeType":"455","messageId":"456","endLine":28,"endColumn":22},{"ruleId":"453","severity":1,"message":"512","line":47,"column":19,"nodeType":"455","messageId":"456","endLine":47,"endColumn":30},{"ruleId":"453","severity":1,"message":"513","line":48,"column":10,"nodeType":"455","messageId":"456","endLine":48,"endColumn":24},{"ruleId":"453","severity":1,"message":"514","line":48,"column":26,"nodeType":"455","messageId":"456","endLine":48,"endColumn":44},{"ruleId":"453","severity":1,"message":"515","line":49,"column":23,"nodeType":"455","messageId":"456","endLine":49,"endColumn":38},{"ruleId":"453","severity":1,"message":"516","line":51,"column":25,"nodeType":"455","messageId":"456","endLine":51,"endColumn":42},{"ruleId":"453","severity":1,"message":"517","line":52,"column":24,"nodeType":"455","messageId":"456","endLine":52,"endColumn":40},{"ruleId":"453","severity":1,"message":"518","line":56,"column":10,"nodeType":"455","messageId":"456","endLine":56,"endColumn":19},{"ruleId":"453","severity":1,"message":"519","line":56,"column":21,"nodeType":"455","messageId":"456","endLine":56,"endColumn":33},{"ruleId":"453","severity":1,"message":"520","line":57,"column":10,"nodeType":"455","messageId":"456","endLine":57,"endColumn":21},{"ruleId":"453","severity":1,"message":"521","line":58,"column":10,"nodeType":"455","messageId":"456","endLine":58,"endColumn":21},{"ruleId":"453","severity":1,"message":"522","line":59,"column":10,"nodeType":"455","messageId":"456","endLine":59,"endColumn":22},{"ruleId":"453","severity":1,"message":"523","line":60,"column":10,"nodeType":"455","messageId":"456","endLine":60,"endColumn":19},{"ruleId":"453","severity":1,"message":"524","line":60,"column":21,"nodeType":"455","messageId":"456","endLine":60,"endColumn":33},{"ruleId":"525","severity":1,"message":"526","line":64,"column":6,"nodeType":"527","endLine":71,"endColumn":4,"suggestions":"528"},{"ruleId":"525","severity":1,"message":"526","line":126,"column":6,"nodeType":"527","endLine":126,"endColumn":24,"suggestions":"529"},{"ruleId":"530","severity":1,"message":"531","line":132,"column":42,"nodeType":"532","messageId":"533","endLine":132,"endColumn":44},{"ruleId":"453","severity":1,"message":"534","line":162,"column":9,"nodeType":"455","messageId":"456","endLine":162,"endColumn":18},{"ruleId":"453","severity":1,"message":"535","line":170,"column":9,"nodeType":"455","messageId":"456","endLine":170,"endColumn":19},{"ruleId":"453","severity":1,"message":"536","line":193,"column":9,"nodeType":"455","messageId":"456","endLine":193,"endColumn":16},{"ruleId":"449","replacedBy":"537"},{"ruleId":"451","replacedBy":"538"},{"ruleId":"453","severity":1,"message":"539","line":8,"column":21,"nodeType":"455","messageId":"456","endLine":8,"endColumn":33},{"ruleId":"525","severity":1,"message":"540","line":34,"column":6,"nodeType":"527","endLine":34,"endColumn":33,"suggestions":"541"},{"ruleId":"453","severity":1,"message":"500","line":3,"column":3,"nodeType":"455","messageId":"456","endLine":3,"endColumn":13},{"ruleId":"453","severity":1,"message":"501","line":4,"column":3,"nodeType":"455","messageId":"456","endLine":4,"endColumn":20},{"ruleId":"453","severity":1,"message":"502","line":5,"column":3,"nodeType":"455","messageId":"456","endLine":5,"endColumn":13},{"ruleId":"453","severity":1,"message":"464","line":13,"column":3,"nodeType":"455","messageId":"456","endLine":13,"endColumn":13},{"ruleId":"453","severity":1,"message":"503","line":14,"column":3,"nodeType":"455","messageId":"456","endLine":14,"endColumn":13},{"ruleId":"453","severity":1,"message":"476","line":15,"column":3,"nodeType":"455","messageId":"456","endLine":15,"endColumn":16},{"ruleId":"453","severity":1,"message":"504","line":16,"column":3,"nodeType":"455","messageId":"456","endLine":16,"endColumn":15},{"ruleId":"453","severity":1,"message":"477","line":17,"column":3,"nodeType":"455","messageId":"456","endLine":17,"endColumn":12},{"ruleId":"453","severity":1,"message":"505","line":18,"column":3,"nodeType":"455","messageId":"456","endLine":18,"endColumn":11},{"ruleId":"453","severity":1,"message":"506","line":22,"column":31,"nodeType":"455","messageId":"456","endLine":22,"endColumn":41},{"ruleId":"453","severity":1,"message":"507","line":24,"column":10,"nodeType":"455","messageId":"456","endLine":24,"endColumn":24},{"ruleId":"453","severity":1,"message":"508","line":24,"column":26,"nodeType":"455","messageId":"456","endLine":24,"endColumn":34},{"ruleId":"453","severity":1,"message":"463","line":25,"column":10,"nodeType":"455","messageId":"456","endLine":25,"endColumn":17},{"ruleId":"453","severity":1,"message":"509","line":25,"column":19,"nodeType":"455","messageId":"456","endLine":25,"endColumn":35},{"ruleId":"453","severity":1,"message":"510","line":27,"column":10,"nodeType":"455","messageId":"456","endLine":27,"endColumn":22},{"ruleId":"453","severity":1,"message":"511","line":27,"column":24,"nodeType":"455","messageId":"456","endLine":27,"endColumn":41},{"ruleId":"453","severity":1,"message":"465","line":28,"column":10,"nodeType":"455","messageId":"456","endLine":28,"endColumn":22},{"ruleId":"453","severity":1,"message":"542","line":29,"column":10,"nodeType":"455","messageId":"456","endLine":29,"endColumn":12},{"ruleId":"453","severity":1,"message":"512","line":54,"column":19,"nodeType":"455","messageId":"456","endLine":54,"endColumn":30},{"ruleId":"453","severity":1,"message":"513","line":55,"column":10,"nodeType":"455","messageId":"456","endLine":55,"endColumn":24},{"ruleId":"453","severity":1,"message":"514","line":55,"column":26,"nodeType":"455","messageId":"456","endLine":55,"endColumn":44},{"ruleId":"453","severity":1,"message":"515","line":56,"column":23,"nodeType":"455","messageId":"456","endLine":56,"endColumn":38},{"ruleId":"453","severity":1,"message":"516","line":58,"column":25,"nodeType":"455","messageId":"456","endLine":58,"endColumn":42},{"ruleId":"453","severity":1,"message":"517","line":59,"column":24,"nodeType":"455","messageId":"456","endLine":59,"endColumn":40},{"ruleId":"453","severity":1,"message":"518","line":63,"column":10,"nodeType":"455","messageId":"456","endLine":63,"endColumn":19},{"ruleId":"453","severity":1,"message":"519","line":63,"column":21,"nodeType":"455","messageId":"456","endLine":63,"endColumn":33},{"ruleId":"453","severity":1,"message":"520","line":64,"column":10,"nodeType":"455","messageId":"456","endLine":64,"endColumn":21},{"ruleId":"453","severity":1,"message":"521","line":65,"column":10,"nodeType":"455","messageId":"456","endLine":65,"endColumn":21},{"ruleId":"453","severity":1,"message":"522","line":66,"column":10,"nodeType":"455","messageId":"456","endLine":66,"endColumn":22},{"ruleId":"453","severity":1,"message":"523","line":67,"column":10,"nodeType":"455","messageId":"456","endLine":67,"endColumn":19},{"ruleId":"453","severity":1,"message":"524","line":67,"column":21,"nodeType":"455","messageId":"456","endLine":67,"endColumn":33},{"ruleId":"453","severity":1,"message":"543","line":68,"column":10,"nodeType":"455","messageId":"456","endLine":68,"endColumn":16},{"ruleId":"453","severity":1,"message":"544","line":68,"column":18,"nodeType":"455","messageId":"456","endLine":68,"endColumn":27},{"ruleId":"453","severity":1,"message":"545","line":73,"column":17,"nodeType":"455","messageId":"456","endLine":73,"endColumn":25},{"ruleId":"525","severity":1,"message":"546","line":97,"column":6,"nodeType":"527","endLine":97,"endColumn":36,"suggestions":"547"},{"ruleId":"525","severity":1,"message":"526","line":101,"column":6,"nodeType":"527","endLine":108,"endColumn":4,"suggestions":"548"},{"ruleId":"525","severity":1,"message":"526","line":163,"column":6,"nodeType":"527","endLine":163,"endColumn":24,"suggestions":"549"},{"ruleId":"530","severity":1,"message":"531","line":169,"column":42,"nodeType":"532","messageId":"533","endLine":169,"endColumn":44},{"ruleId":"453","severity":1,"message":"534","line":199,"column":9,"nodeType":"455","messageId":"456","endLine":199,"endColumn":18},{"ruleId":"453","severity":1,"message":"535","line":207,"column":9,"nodeType":"455","messageId":"456","endLine":207,"endColumn":19},{"ruleId":"449","replacedBy":"550"},{"ruleId":"451","replacedBy":"551"},{"ruleId":"453","severity":1,"message":"552","line":3,"column":52,"nodeType":"455","messageId":"456","endLine":3,"endColumn":69},{"ruleId":"453","severity":1,"message":"454","line":2,"column":3,"nodeType":"455","messageId":"456","endLine":2,"endColumn":5},{"ruleId":"453","severity":1,"message":"501","line":4,"column":3,"nodeType":"455","messageId":"456","endLine":4,"endColumn":20},{"ruleId":"453","severity":1,"message":"502","line":5,"column":3,"nodeType":"455","messageId":"456","endLine":5,"endColumn":13},{"ruleId":"453","severity":1,"message":"464","line":15,"column":3,"nodeType":"455","messageId":"456","endLine":15,"endColumn":13},{"ruleId":"453","severity":1,"message":"503","line":16,"column":3,"nodeType":"455","messageId":"456","endLine":16,"endColumn":13},{"ruleId":"453","severity":1,"message":"476","line":17,"column":3,"nodeType":"455","messageId":"456","endLine":17,"endColumn":16},{"ruleId":"453","severity":1,"message":"504","line":18,"column":3,"nodeType":"455","messageId":"456","endLine":18,"endColumn":15},{"ruleId":"453","severity":1,"message":"477","line":19,"column":3,"nodeType":"455","messageId":"456","endLine":19,"endColumn":12},{"ruleId":"453","severity":1,"message":"505","line":20,"column":3,"nodeType":"455","messageId":"456","endLine":20,"endColumn":11},{"ruleId":"453","severity":1,"message":"506","line":24,"column":31,"nodeType":"455","messageId":"456","endLine":24,"endColumn":41},{"ruleId":"453","severity":1,"message":"507","line":26,"column":10,"nodeType":"455","messageId":"456","endLine":26,"endColumn":24},{"ruleId":"453","severity":1,"message":"508","line":26,"column":26,"nodeType":"455","messageId":"456","endLine":26,"endColumn":34},{"ruleId":"453","severity":1,"message":"463","line":27,"column":10,"nodeType":"455","messageId":"456","endLine":27,"endColumn":17},{"ruleId":"453","severity":1,"message":"509","line":27,"column":19,"nodeType":"455","messageId":"456","endLine":27,"endColumn":35},{"ruleId":"453","severity":1,"message":"510","line":29,"column":10,"nodeType":"455","messageId":"456","endLine":29,"endColumn":22},{"ruleId":"453","severity":1,"message":"511","line":29,"column":24,"nodeType":"455","messageId":"456","endLine":29,"endColumn":41},{"ruleId":"453","severity":1,"message":"465","line":30,"column":10,"nodeType":"455","messageId":"456","endLine":30,"endColumn":22},{"ruleId":"453","severity":1,"message":"518","line":61,"column":10,"nodeType":"455","messageId":"456","endLine":61,"endColumn":19},{"ruleId":"453","severity":1,"message":"519","line":61,"column":21,"nodeType":"455","messageId":"456","endLine":61,"endColumn":33},{"ruleId":"453","severity":1,"message":"553","line":62,"column":10,"nodeType":"455","messageId":"456","endLine":62,"endColumn":20},{"ruleId":"453","severity":1,"message":"554","line":63,"column":10,"nodeType":"455","messageId":"456","endLine":63,"endColumn":21},{"ruleId":"525","severity":1,"message":"526","line":106,"column":6,"nodeType":"527","endLine":115,"endColumn":4,"suggestions":"555"},{"ruleId":"525","severity":1,"message":"556","line":150,"column":6,"nodeType":"527","endLine":150,"endColumn":15,"suggestions":"557"},{"ruleId":"530","severity":1,"message":"531","line":156,"column":42,"nodeType":"532","messageId":"533","endLine":156,"endColumn":44},{"ruleId":"530","severity":1,"message":"531","line":166,"column":36,"nodeType":"532","messageId":"533","endLine":166,"endColumn":38},{"ruleId":"453","severity":1,"message":"501","line":4,"column":3,"nodeType":"455","messageId":"456","endLine":4,"endColumn":20},{"ruleId":"453","severity":1,"message":"464","line":15,"column":3,"nodeType":"455","messageId":"456","endLine":15,"endColumn":13},{"ruleId":"453","severity":1,"message":"503","line":16,"column":3,"nodeType":"455","messageId":"456","endLine":16,"endColumn":13},{"ruleId":"453","severity":1,"message":"476","line":17,"column":3,"nodeType":"455","messageId":"456","endLine":17,"endColumn":16},{"ruleId":"453","severity":1,"message":"504","line":18,"column":3,"nodeType":"455","messageId":"456","endLine":18,"endColumn":15},{"ruleId":"453","severity":1,"message":"477","line":19,"column":3,"nodeType":"455","messageId":"456","endLine":19,"endColumn":12},{"ruleId":"453","severity":1,"message":"505","line":20,"column":3,"nodeType":"455","messageId":"456","endLine":20,"endColumn":11},{"ruleId":"453","severity":1,"message":"558","line":28,"column":8,"nodeType":"455","messageId":"456","endLine":28,"endColumn":13},{"ruleId":"453","severity":1,"message":"559","line":28,"column":17,"nodeType":"455","messageId":"456","endLine":28,"endColumn":21},{"ruleId":"453","severity":1,"message":"506","line":28,"column":31,"nodeType":"455","messageId":"456","endLine":28,"endColumn":41},{"ruleId":"453","severity":1,"message":"560","line":28,"column":55,"nodeType":"455","messageId":"456","endLine":28,"endColumn":60},{"ruleId":"453","severity":1,"message":"561","line":30,"column":39,"nodeType":"455","messageId":"456","endLine":30,"endColumn":50},{"ruleId":"453","severity":1,"message":"507","line":31,"column":10,"nodeType":"455","messageId":"456","endLine":31,"endColumn":24},{"ruleId":"453","severity":1,"message":"508","line":31,"column":26,"nodeType":"455","messageId":"456","endLine":31,"endColumn":34},{"ruleId":"453","severity":1,"message":"463","line":32,"column":10,"nodeType":"455","messageId":"456","endLine":32,"endColumn":17},{"ruleId":"453","severity":1,"message":"509","line":32,"column":19,"nodeType":"455","messageId":"456","endLine":32,"endColumn":35},{"ruleId":"453","severity":1,"message":"510","line":34,"column":10,"nodeType":"455","messageId":"456","endLine":34,"endColumn":22},{"ruleId":"453","severity":1,"message":"511","line":34,"column":24,"nodeType":"455","messageId":"456","endLine":34,"endColumn":41},{"ruleId":"453","severity":1,"message":"465","line":35,"column":10,"nodeType":"455","messageId":"456","endLine":35,"endColumn":22},{"ruleId":"453","severity":1,"message":"512","line":54,"column":19,"nodeType":"455","messageId":"456","endLine":54,"endColumn":30},{"ruleId":"453","severity":1,"message":"515","line":56,"column":23,"nodeType":"455","messageId":"456","endLine":56,"endColumn":38},{"ruleId":"453","severity":1,"message":"518","line":66,"column":10,"nodeType":"455","messageId":"456","endLine":66,"endColumn":19},{"ruleId":"453","severity":1,"message":"519","line":66,"column":21,"nodeType":"455","messageId":"456","endLine":66,"endColumn":33},{"ruleId":"453","severity":1,"message":"553","line":67,"column":10,"nodeType":"455","messageId":"456","endLine":67,"endColumn":20},{"ruleId":"453","severity":1,"message":"554","line":68,"column":10,"nodeType":"455","messageId":"456","endLine":68,"endColumn":21},{"ruleId":"525","severity":1,"message":"526","line":107,"column":6,"nodeType":"527","endLine":116,"endColumn":4,"suggestions":"562"},{"ruleId":"525","severity":1,"message":"563","line":159,"column":6,"nodeType":"527","endLine":159,"endColumn":8,"suggestions":"564"},{"ruleId":"530","severity":1,"message":"531","line":165,"column":42,"nodeType":"532","messageId":"533","endLine":165,"endColumn":44},{"ruleId":"530","severity":1,"message":"531","line":175,"column":36,"nodeType":"532","messageId":"533","endLine":175,"endColumn":38},{"ruleId":"453","severity":1,"message":"565","line":1,"column":44,"nodeType":"455","messageId":"456","endLine":1,"endColumn":52},{"ruleId":"453","severity":1,"message":"566","line":2,"column":23,"nodeType":"455","messageId":"456","endLine":2,"endColumn":29},{"ruleId":"453","severity":1,"message":"506","line":2,"column":31,"nodeType":"455","messageId":"456","endLine":2,"endColumn":41},{"ruleId":"453","severity":1,"message":"567","line":2,"column":43,"nodeType":"455","messageId":"456","endLine":2,"endColumn":53},{"ruleId":"453","severity":1,"message":"560","line":2,"column":55,"nodeType":"455","messageId":"456","endLine":2,"endColumn":60},{"ruleId":"453","severity":1,"message":"561","line":6,"column":10,"nodeType":"455","messageId":"456","endLine":6,"endColumn":21},{"ruleId":"525","severity":1,"message":"568","line":21,"column":6,"nodeType":"527","endLine":21,"endColumn":8,"suggestions":"569"},{"ruleId":"453","severity":1,"message":"570","line":1,"column":8,"nodeType":"455","messageId":"456","endLine":1,"endColumn":13},{"ruleId":"453","severity":1,"message":"457","line":1,"column":17,"nodeType":"455","messageId":"456","endLine":1,"endColumn":26},"no-native-reassign",["571"],"no-negated-in-lhs",["572"],"@typescript-eslint/no-unused-vars","'FC' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'logo' is defined but never used.","'FriendBoard' is defined but never used.","'BotVBotBoard' is defined but never used.","'ReplayGameBoard' is defined but never used.","'CreateGameForm' is defined but never used.","'classic' is defined but never used.","'BoardClass' is defined but never used.","'BoardContext' is defined but never used.","'Router' is defined but never used.","'Route' is defined but never used.","'NavLink' is defined but never used.","'axios' is defined but never used.","'Account' is defined but never used.","'Bank' is defined but never used.","'ConfirmationValidator' is defined but never used.","'PrimaryValidator' is defined but never used.","'setGames' is assigned a value but never used.","'CSS' is defined but never used.","'ITilePosition' is defined but never used.","'TileClass' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'collapseTextChangeRangesAcrossMultipleVersions' is defined but never used.","'VoidExpression' is defined but never used.","'clone' is defined but never used.","'kingsMoves' is assigned a value but never used.",["571"],["572"],"'Pawn' is defined but never used.","no-useless-computed-key","Unnecessarily computed property [\"black\"] found.","Property","unnecessarilyComputedProperty",{"range":"573","text":"574"},"Unnecessarily computed property [\"white\"] found.",{"range":"575","text":"576"},{"range":"577","text":"574"},{"range":"578","text":"576"},["571"],["572"],"'MouseEvent' is defined but never used.","'MouseEventHandler' is defined but never used.","'useContext' is defined but never used.","'IMovePiece' is defined but never used.","'SelectedTile' is defined but never used.","'TileData' is defined but never used.","'GameStatus' is defined but never used.","'maskSideInEnum' is defined but never used.","'SideEnum' is defined but never used.","'classic_outlined' is defined but never used.","'calculatePGN' is defined but never used.","'possiblePromotion' is defined but never used.","'set_game_id' is assigned a value but never used.","'disable_pieces' is assigned a value but never used.","'set_disable_pieces' is assigned a value but never used.","'set_player_side' is assigned a value but never used.","'set_selected_tile' is assigned a value but never used.","'set_turn_to_play' is assigned a value but never used.","'promotion' is assigned a value but never used.","'setPromotion' is assigned a value but never used.","'isCheckMate' is assigned a value but never used.","'isStaleMate' is assigned a value but never used.","'isRepitition' is assigned a value but never used.","'pauseGame' is assigned a value but never used.","'setPauseGame' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'map_tile_data_to_jsx'. Either include it or remove the dependency array.","ArrayExpression",["579"],["580"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'next_turn' is assigned a value but never used.","'updateView' is assigned a value but never used.","'endGame' is assigned a value but never used.",["571"],["572"],"'setStartTime' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'onTimeUp'. Either include it or remove the dependency array. If 'onTimeUp' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["581"],"'io' is defined but never used.","'winner' is assigned a value but never used.","'setWinner' is assigned a value but never used.","'setSpeed' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'game?.moveHistory'. Either include it or remove the dependency array.",["582"],["583"],["584"],["571"],["572"],"'PaginatedResponse' is defined but never used.","'isGameOver' is assigned a value but never used.","'gameResults' is assigned a value but never used.",["585"],"React Hook useEffect has a missing dependency: 'turn_to_play'. Either include it or remove the dependency array.",["586"],"'chess' is defined but never used.","'Move' is defined but never used.","'Piece' is defined but never used.","'PlayerSides' is defined but never used.",["587"],"React Hook useEffect has missing dependencies: 'gameClient', 'gameOver', 'map_tile_data_to_jsx', 'next_turn', and 'turn_to_play'. Either include them or remove the dependency array.",["588"],"'useState' is defined but never used.","'Square' is defined but never used.","'PlayedMove' is defined but never used.","React Hook useEffect has missing dependencies: 'props' and 'startGame'. Either include them or remove the dependency array.",["589"],"'React' is defined but never used.","no-global-assign","no-unsafe-negation",[346,355],"\"black\"",[784,793],"\"white\"",[355,364],[793,802],{"desc":"590","fix":"591"},{"desc":"592","fix":"593"},{"desc":"594","fix":"595"},{"desc":"596","fix":"597"},{"desc":"590","fix":"598"},{"desc":"592","fix":"599"},{"desc":"600","fix":"601"},{"desc":"602","fix":"603"},{"desc":"600","fix":"604"},{"desc":"605","fix":"606"},{"desc":"607","fix":"608"},"Update the dependencies array to be: [selected_tile, player_side, turn_to_play, last_move, kingOnCheck, history, map_tile_data_to_jsx]",{"range":"609","text":"610"},"Update the dependencies array to be: [game_id, history, map_tile_data_to_jsx]",{"range":"611","text":"612"},"Update the dependencies array to be: [turn_to_play, player_side, onTimeUp]",{"range":"613","text":"614"},"Update the dependencies array to be: [moveIndex, speed, playButton, game?.moveHistory]",{"range":"615","text":"616"},{"range":"617","text":"610"},{"range":"618","text":"612"},"Update the dependencies array to be: [selected_tile, player_side, turn_to_play, last_move, movesToDisplay, kingOnCheck, history, disable_pieces, map_tile_data_to_jsx]",{"range":"619","text":"620"},"Update the dependencies array to be: [game_id, turn_to_play]",{"range":"621","text":"622"},{"range":"623","text":"620"},"Update the dependencies array to be: [gameClient, gameOver, map_tile_data_to_jsx, next_turn, turn_to_play]",{"range":"624","text":"625"},"Update the dependencies array to be: [props, startGame]",{"range":"626","text":"627"},[1873,1977],"[selected_tile, player_side, turn_to_play, last_move, kingOnCheck, history, map_tile_data_to_jsx]",[3600,3618],"[game_id, history, map_tile_data_to_jsx]",[1032,1059],"[turn_to_play, player_side, onTimeUp]",[2774,2804],"[moveIndex, speed, playButton, game?.moveHistory]",[2861,2965],[4588,4606],[2757,2901],"[selected_tile, player_side, turn_to_play, last_move, movesToDisplay, kingOnCheck, history, disable_pieces, map_tile_data_to_jsx]",[3882,3891],"[game_id, turn_to_play]",[3006,3150],[4382,4384],"[gameClient, gameOver, map_tile_data_to_jsx, next_turn, turn_to_play]",[576,578],"[props, startGame]"]